{"version":3,"sources":["components/MyAvatar/MyAvatar.js","defines/Slt.js","defines/Config.js","defines/https/UserApi.js","defines/Helper.js","defines/MyTime.js","defines/Socket.js","defines/Socket/SocketEventName.js","defines/Socket/MySocket.js","features/auth/authSlice.js","GeneralSlices/themeSlice.js","components/DayNightSwitch/DayNightSwitch.js","components/IconWithBadge.js","components/RouterLink/RouterLink.js","components/Notifications/Notifications.js","defines/CookieName.js","components/Header/Header.js","defines/styles/MainStyles.js","components/MyAvatarGroup/MyAvatarGroup.js","defines/https/ConversationApi.js","features/chat/ChatSlice.js","components/ConversationLink/ConversationLink.js","components/ConversationItem/ConversationItem.js","features/sidebarConversations/SidebarConversationsSlice.js","components/ConversationList/ConversationList.js","features/NewChat/NewChatSlice.js","components/Loading/Loading.js","components/Message/Message.js","components/ChatNotification/ChatNotification.js","components/Messages/Messages.js","components/SendingInput/SendingInput.js","features/notify/NotifySlice.js","defines/Message.js","components/SendMessageBar/SendMessageBar.js","components/UserTyping/UserTyping.js","components/NormalChat/NormalChat.js","components/Receiver/Receiver.js","components/SuggestionUsers/SuggestionUsers.js","components/NewChat/NewChat.js","components/ChatBox/ChatBox.js","components/AppTitle/AppTitle.js","components/OnlineUser/OnlineUsers.js","features/chat/Chat.js","defines/configs/FormErrors.js","components/SignIn/SignIn.js","defines/validates/UserValidates.js","components/SignUp/SignUp.js","features/notify/Notify.js","components/PrivateRoute/PrivateRoute.js","features/friend/FriendSlice.js","components/FriendAction/SentRequestAction.js","components/FriendAction/RequestAction.js","components/FriendAction/StrangerAction.js","components/FriendAction/FriendAction.js","components/FriendList/FriendList.js","components/FriendBox/FriendBox.js","components/Friends/Friends.js","components/AuthRoute/AuthRoute.js","App.js","components/store.js","index.js"],"names":["StyledBadge","withStyles","theme","badge","backgroundColor","color","boxShadow","palette","background","paper","transform","opacity","Badge","useStyles","makeStyles","root","display","margin","spacing","MyAvatar","name","picture","online","sizeInPixel","classes","myStyle","width","height","avatar","Avatar","style","alt","src","className","overlap","anchorOrigin","vertical","horizontal","variant","Slt","mainAppBar","API_ADDRESS","prefix","UserApi","findByUsername","username","a","Axios","get","params","data","findByUsernameAndPassword","password","post","createAccount","findAllFriendsByUsername","findSentRequestFriendById","id","findStrangerByUsername","sentFriendRequest","friendId","unfriend","cancelFriendRequest","deleteFriendRequest","confirmFriendRequest","findUsersByIds","ids","findReceivers","exceptIds","findFriends","type","userId","Helper","ucFirst","str","slice","toUpperCase","titleCase","words","trim","split","length","reduce","accumulator","this","sleep","ms","Promise","resolve","setTimeout","isFn","fn","format","string","result","key","replace","getArrayOfFieldValue","items","field","map","item","toString","arrayDiff","arr1","arr2","biggerArr","smallerArr","forEach","indexOf","push","MyTime","getUTCNow","now","Date","time","getTime","offset","getTimezoneOffset","getCurrentTimeByUTCTime","utcTime","getMessageTimeString","itemDate","getFullYear","getMonth","getDate","dateformat","Socket","io","SocketEventName","updateUser","signIn","signOut","getOnlineUsers","typing","stopTyping","sendMessage","receiveMessage","newMessageNotification","onlineUsers","joinUsersToConversation","joinRoom","leaveRoom","acceptFriend","addFriend","friendRequestCanceled","friendRejected","friendAccepted","friendRequested","friendUnfriend","MySocket","emitSignIn","user","emit","emitSignOut","emitGetOnlineUsers","emitUpdateUserById","emitSendMessage","message","conversationId","emitTyping","emitStopTyping","emitJoinUsersToConversation","emitJoinRoom","roomName","emitLeaveRoom","emitAddFriend","emitAcceptFriend","emitUnfriend","emitCancelFriendRequest","emitDeleteFriendRequest","onUpdateUser","callback","on","onReceiveMessage","onOnlineUsers","onTyping","onStopTyping","onNewMessageNotification","onFriendAccepted","onFriendRequested","onFriendUnFriend","onFriendRequestCanceled","onFriendRejected","off","eventName","loginThunk","createAsyncThunk","response","sentFriendRequestThunk","loginWithUser","state","action","payload","isLogged","authSlice","createSlice","initialState","status","error","reducers","login","extraReducers","pending","fulfilled","rejected","authError","auth","authUser","authUserId","_id","actions","themeSLice","switchThemeType","DayNightSwitch","useSelector","dispatch","useDispatch","useCookies","cookies","setCookie","useEffect","IconButton","aria-label","onClick","cookieValue","JSON","stringify","right","top","border","padding","RouterLink","children","rest","all","Notifications","useHistory","Fragment","Hidden","xsDown","to","Tooltip","title","LOGGED_USER","Header","props","removeCookie","logged","authStatus","pathName","useLocation","pathname","history","toolsHtml","Box","alignItems","justifyContent","mr","single","Button","disabled","startIcon","Typography","AppBar","position","Toolbar","textDecoration","colors","mainStyles","createStyles","table","minWidth","chatSection","overflow","headBG","borderRight500","borderRight","borderLeft500","borderLeft","messageArea","overflowY","RoundLightGrayInputStyle","paddingLeft","paddingRight","borderRadius","buttonStyle","textTransform","flexCenterVerticalStyle","flexCenterStyle","defaultContainerPaddingStyle","MyAvatarGroup","max","avatars","index","AvatarGroup","ConversationApi","findConversationById","findConversationByMemberIds","findSidebarConversationById","listConversationsForListDisplay","findConversationInfoByUserIdsOrCreateIfNotExist","getHomeConversation","createConversationWithMemberIds","messageParams","fetchConversationByMemberIds","fetchConversationById","ChatSlice","findConversationByUserIdsOrCreateIfNotExist","conversation","sidebarConversations","appendMessage","messages","reset","conversationStatus","chat","conversationMemberIds","members","conversationMessages","ConversationLink","convoMemberIds","onItemClick","showConversation","isNew","useStyle","truncateListItemStyle","textOverflow","whiteSpace","GenerateAvatarGroup","ConversationItem","icon","convoId","friends","filter","lastMessageText","lastMessage","from","text","ListItem","button","selected","ListItemAvatar","ListItemText","primary","secondary","fetchConversations","fetchAndPrependConversationById","conversationsAdapter","createEntityAdapter","selectId","sortComparer","b","getInitialState","SidebarConversationsSlice","updateLastMessage","entities","upsertOne","upsertMany","getSelectors","selectAllSidebarConversations","selectAll","selectSidebarConversationIds","selectById","selectIds","ConversationList","conversations","loggedUser","myFunc","removeListener","conversationsHtml","i","List","enabled","receivers","NewChatSlice","setEnabled","removeReceiverById","appendReceiver","removeLastReceiver","newChatReceivers","newChat","isNewChatEnable","newChatReceiver","removeNewChatReceiverById","appendNewChatReceiver","removeLastNewChatReceiver","setNewChatEnabled","resetNewChat","Loading","align","Message","notShowAvatar","ownMessage","flexPos","placement","ChatNotification","content","usernameHtml","component","emptyHtml","mt","Messages","mainStyle","newChatEnabled","messagesHtml","nextItem","containers","document","getElementsByClassName","scrollTop","scrollHeight","scroll","myTimeoutObj","NotifySlice","open","timeout","setNotify","notify","invalid","fail","welcomeNewAccount","PleaseTypeMessage","PleaseChooseReceiver","newMessage","unfriended","SendingInput","useState","inputMsg","setInputMsg","isTyping","setTyping","convo","onSendingMessage","onCreateConversationsWithReceicersAndFristMessage","receiverIds","concat","onSubmit","e","preventDefault","onSendingMessageClick","Grid","container","xs","md","TextField","autoFocus","inputProps","autoComplete","value","fullWidth","onChange","target","onKeyUp","which","clearTimeout","onBlur","Send","SendMessageBar","Paper","UserTyping","typingUsers","setTypingUsers","typingHtml","process","elevation","NormalChat","loggedUserId","useParams","receiver","messageObj","SuggestionUsers","dense","generateSuggestionUsers","SelectedUsers","onCloseClick","Alert","severity","size","fontSize","Receiver","onFriendIdSelected","mounted","setMounted","suggestionUsers","setSuggestionUsers","inputVal","setInputVal","receiverName","setReceiverName","inputRef","useRef","fetchUsers","solveSelectedUsers","oldVal","newVal","placeholder","ref","current","querySelector","focus","NewChat","setFriendId","zIndex","ChatBox","loaded","setDisplay","convoStatus","mainHtml","bottom","left","AppTitle","OnlineUsers","setOnlineUsers","isShow","setShow","onlineUsersHtml","smDown","p","Chat","appBarHeight","stle","FormErrors","required","lengthGreater","noSpecialCharacter","unique","match","marginTop","flexDirection","main","form","submit","SignIn","isSubmitClicked","setSubmitClicked","authErr","Container","maxWidth","CssBaseline","initialValues","passwordConfirmation","validationSchema","yup","values","setSubmitting","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","dirty","showErrors","label","helperText","noValidate","cursor","isUsernameExist","isLengthValid","noSpecialCharacters","test","UserValidates","setUsername","timeoutObj","context","reject","isExist","matches","oneOf","SignUp","Notify","isOpen","msg","msgType","duration","handleClose","event","reason","Snackbar","autoHideDuration","onClose","PrivateRoute","render","location","fetchFriendsByIds","fetchStrangersByUsername","adapter","itemsInitialState","friend","request","sent_request","stranger","FriendSlice","onAddFriend","removeOne","addOne","onUnFriend","onCancelFriendRequest","onRejectFriendRequest","onAcceptFriendRequest","onFriendUnfriend","onFriendCanceled","meta","arg","currentState","console","log","friendStatus","selectAllFriend","selectAllRequest","selectAllSentRequest","selectAllStranger","SentRequestAction","onCancelClick","onConfirmClick","onDeleteClick","onAddFriendClick","anchorEl","setAnchorEl","Boolean","onUnfriendClick","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","PaperProps","maxHeight","ITEM_HEIGHT","MenuItem","FriendList","isLoading","itemsHtml","localType","getType","CardActions","lg","Card","CardHeader","subheader","AllFriendList","SentRequestList","RequestList","PeopleMayKnowList","FriendBox","paddingTop","a11yProps","friendTabs","Friends","React","setValue","tab","friendsTab","Tabs","newValue","indicatorColor","scrollButtons","Tab","AuthRoute","App","themeType","createMuiTheme","ThemeProvider","base","path","exact","configureStore","reducer","themeSlice","ReactDOM","store","getElementById"],"mappings":"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","file":"static/js/main.074c9053.chunk.js","sourcesContent":["import React from 'react';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0\r\n        }\r\n    }\r\n}))(Badge);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function MyAvatar({ name, picture, online, sizeInPixel }) {\r\n    const classes = useStyles();\r\n    const myStyle = true ? { width: `${sizeInPixel}px`, height: `${sizeInPixel}px` } : {};\r\n    const avatar = <Avatar style={myStyle} alt={name} src={picture} />;\r\n    return (\r\n        <div className={classes.root}>\r\n            {(online) ? (\r\n                <StyledBadge\r\n                    overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right'\r\n                    }}\r\n                    variant=\"dot\">\r\n                    {avatar}\r\n                </StyledBadge>\r\n            ) : avatar\r\n            }\r\n        </div>\r\n    );\r\n}","const Slt = {\r\n    mainAppBar: '#main-app-bar'\r\n}\r\nexport default Slt;","export const isDevMode = false;\r\nexport const API_ADDRESS = isDevMode ? 'http://localhost:3000' : 'https://pa-chat-api.glitch.me';","import Axios from \"axios\";\r\nimport { API_ADDRESS } from \"../Config\";\r\n\r\nconst prefix = `${API_ADDRESS}/user`;\r\n\r\nconst UserApi = {\r\n    findByUsername: async function (username) {\r\n        const data = await Axios.get(`${prefix}/getUserByUsername`, {\r\n            params: {\r\n                username\r\n            }\r\n        })\r\n        return data.data;\r\n    },\r\n    findByUsernameAndPassword: async function (username, password) {\r\n        const data = await Axios.post(`${prefix}/getUserByUsernameAndPassword`, { username, password })\r\n        return data.data;\r\n    },\r\n    createAccount: async function (username, password) {\r\n        const data = await Axios.post(`${prefix}/createAccount`, { username, password })\r\n        return data.data;\r\n    },\r\n    findAllFriendsByUsername: async function (username) {\r\n        const data = await Axios.get(`${prefix}/getFriendsByUsername`, {\r\n            params: {\r\n                username\r\n            }\r\n        })\r\n        return data.data;\r\n    },\r\n    findSentRequestFriendById: async function (id) {\r\n        const data = await Axios.get(`${prefix}/getSentRequestFriendById`, {\r\n            params: {\r\n                id\r\n            }\r\n        })\r\n        return data.data;\r\n    },\r\n    findStrangerByUsername: async function (username) {\r\n        const data = await Axios.get(`${prefix}/getStrangerByUsername`, {\r\n            params: {\r\n                username\r\n            }\r\n        })\r\n        return data.data;\r\n    },\r\n\r\n    // FRIEND\r\n    sentFriendRequest: async function (id, friendId) {\r\n        const data = await Axios.post(`${prefix}/sentFriendRequest`, { id, friendId });\r\n        return data.data;\r\n    },\r\n    unfriend: async function (id, friendId) {\r\n        const data = await Axios.post(`${prefix}/unfriend`, { id, friendId });\r\n        return data.data;\r\n    },\r\n    cancelFriendRequest: async function (id, friendId) {\r\n        const data = await Axios.post(`${prefix}/cancelFriendRequest`, { id, friendId });\r\n        return data.data;\r\n    },\r\n    deleteFriendRequest: async function (id, friendId) {\r\n        const data = await Axios.post(`${prefix}/deleteFriendRequest`, { id, friendId });\r\n        return data.data;\r\n    },\r\n    confirmFriendRequest: async function (id, friendId) {\r\n        const data = await Axios.post(`${prefix}/confirmFriendRequest`, { id, friendId });\r\n        return data.data;\r\n    },\r\n    findUsersByIds: async function (ids) {\r\n        const data = await Axios.post(`${prefix}/getUsersByIds`, { ids });\r\n        return data.data;\r\n    },\r\n    findReceivers: async function (username, exceptIds) {\r\n        const data = await Axios.post(`${prefix}/getReceivers`, {\r\n            username, exceptIds,\r\n        });\r\n        return data.data;\r\n    },\r\n    findFriends: async function (type, userId) {\r\n        return [];\r\n    },\r\n}\r\nexport default UserApi;","const Helper = {\r\n    ucFirst: function (str) {\r\n        if (str) {\r\n            return str.slice(0, 1).toUpperCase() + str.slice(1);\r\n        }\r\n    },\r\n    titleCase: function (str) {\r\n        if (str) {\r\n            let result;\r\n            str = str.trim();\r\n            let words = str.split(' ');\r\n            if (words.length > 1)\r\n                result = words.reduce((accumulator) => {\r\n                    return this.ucFirst(accumulator) + ' ';\r\n                })\r\n            else result = this.ucFirst(words[0]);\r\n            result = result.trim();\r\n            return result;\r\n        }\r\n    },\r\n    sleep: ms => new Promise(resolve => setTimeout(() => { resolve(); }, ms)),\r\n    isFn: fn => typeof fn === 'function',\r\n    format: function (string, ...params) {\r\n        let result = string;\r\n        if (string && params.length > 0) {\r\n            for (let key in params) {\r\n                result = result.replace(`{${key}}`, params[key]);\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    getArrayOfFieldValue: function (items, field, type) {\r\n        const arrayOfFieldValue = items.map((item) => {\r\n            if (type === 'string') return item[field].toString();\r\n            return item[field];\r\n        })\r\n        return arrayOfFieldValue;\r\n    },\r\n    arrayDiff: function (arr1, arr2) {\r\n        let biggerArr;\r\n        let smallerArr;\r\n        let result = [];\r\n        if (arr1.length > arr2.length) {\r\n            biggerArr = arr1;\r\n            smallerArr = arr2;\r\n        }\r\n        else {\r\n            biggerArr = arr2;\r\n            smallerArr = arr1;\r\n        }\r\n        biggerArr.forEach((item) => {\r\n            if (smallerArr.indexOf(item) === -1) result.push(item);\r\n        })\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Helper;","import * as dateformat from 'dateformat';\r\nconst MyTime = {\r\n\r\n    getUTCNow: function () {\r\n        var now = new Date();\r\n        var time = now.getTime();\r\n        var offset = now.getTimezoneOffset();\r\n        offset = offset * 60000;\r\n        return time - offset;\r\n    },\r\n\r\n    getCurrentTimeByUTCTime: function (utcTime) {\r\n        let now = new Date();\r\n        let offset = now.getTimezoneOffset();\r\n        offset = offset * 60000;\r\n        return utcTime + offset;\r\n    },\r\n\r\n    getMessageTimeString: function (time) {\r\n        let itemDate = new Date(time);\r\n        let now = new Date();\r\n        let result\r\n        if (\r\n            (\r\n                now.getFullYear() === itemDate.getFullYear() &&\r\n                now.getMonth() === itemDate.getMonth() &&\r\n                now.getDate() === itemDate.getDate()\r\n            )\r\n\r\n        )\r\n            result = dateformat(time, 'HH:MM');\r\n        else\r\n            result = dateformat(time, 'dd/mm/yyyy HH:MM');\r\n        return result;\r\n    },\r\n}\r\nexport default MyTime;","import { io } from \"socket.io-client\";\r\nimport { API_ADDRESS } from \"./Config\";\r\n\r\nvar connectionOptions = {\r\n    \"force new connection\": true,\r\n    \"reconnectionAttempts\": \"Infinity\",\r\n    \"timeout\": 10000,\r\n    \"transports\": [\"websocket\"]\r\n};\r\nconst Socket = io(API_ADDRESS, connectionOptions);\r\nexport default Socket;","const SocketEventName = {\r\n    updateUser: 'update-user',\r\n    signIn: 'sign-in',\r\n    signOut: 'sign-out',\r\n    getOnlineUsers: 'get-online-users',\r\n    typing: 'typing',\r\n    stopTyping: 'stop-typing',\r\n    sendMessage: 'send-message',\r\n    receiveMessage: 'receive-message',\r\n    newMessageNotification: 'new-message-notification',\r\n    onlineUsers: 'online-users',\r\n    joinUsersToConversation: 'join-users-to-conversation',\r\n    joinRoom: 'join-room',\r\n    leaveRoom: 'leave-room',\r\n    acceptFriend: 'accept-friend',\r\n    addFriend: 'add-friend',\r\n    unfriend: 'unfriend',\r\n    cancelFriendRequest: 'cancel-friend-request',\r\n    deleteFriendRequest: 'delete-friend-request',\r\n    friendRequestCanceled: 'friend-request-canceled',\r\n    friendRejected: 'friend-rejected',\r\n    friendAccepted: 'friend-accepted',\r\n    friendRequested: 'friend-requested',\r\n    friendUnfriend: 'friend-unfriend',\r\n}\r\n\r\nexport default SocketEventName;","import Helper from '../Helper';\r\nimport MyTime from '../MyTime';\r\nimport Socket from '../Socket';\r\nimport SocketEventName from './SocketEventName';\r\nconst MySocket = {\r\n    // EMIT\r\n    emitSignIn: function (user) {\r\n        Socket.emit(SocketEventName.signIn, { user });\r\n    },\r\n    emitSignOut: function (user) {\r\n        Socket.emit(SocketEventName.signOut, { user });\r\n    },\r\n    emitGetOnlineUsers: function () {\r\n        Socket.emit(SocketEventName.getOnlineUsers);\r\n    },\r\n    emitUpdateUserById: function (id) {\r\n        Socket.emit(SocketEventName.updateUser, { id });\r\n    },\r\n    emitSendMessage: function (user, message, conversationId) {\r\n        Socket.emit(SocketEventName.sendMessage, { user, message, conversationId });\r\n    },\r\n    emitTyping: function (user, conversationId) {\r\n        Socket.emit(SocketEventName.typing, { user, conversationId });\r\n    },\r\n    emitStopTyping: function (username, conversationId) {\r\n        Socket.emit(SocketEventName.stopTyping, { username, conversationId });\r\n    },\r\n    emitJoinUsersToConversation: function (ids, conversationId) {\r\n        Socket.emit(SocketEventName.joinUsersToConversation, { ids, conversationId });\r\n    },\r\n    emitJoinRoom: function (roomName) {\r\n        Socket.emit(SocketEventName.joinRoom, { roomName });\r\n    },\r\n    emitLeaveRoom: function (roomName) {\r\n        Socket.emit(SocketEventName.leaveRoom, { roomName });\r\n    },\r\n\r\n    // FRIEND ACTION\r\n    emitAddFriend: function (user, friendId) {\r\n        Socket.emit(SocketEventName.addFriend, { user, friendId });\r\n    },\r\n    emitAcceptFriend: function (user, friendId) {\r\n        Socket.emit(SocketEventName.acceptFriend, { user, friendId });\r\n    },\r\n    emitUnfriend: function (user, friendId) {\r\n        Socket.emit(SocketEventName.unfriend, { user, friendId });\r\n    },\r\n    emitCancelFriendRequest: function (user, friendId) {\r\n        Socket.emit(SocketEventName.cancelFriendRequest, { user, friendId });\r\n    },\r\n    emitDeleteFriendRequest: function (user, friendId) {\r\n        Socket.emit(SocketEventName.deleteFriendRequest, { user, friendId });\r\n    },\r\n\r\n    // ON\r\n    onUpdateUser: function (callback) {\r\n        Socket.on(SocketEventName.updateUser, (data) => {\r\n            if (Helper.isFn(callback)) callback(data);\r\n        })\r\n    },\r\n    onReceiveMessage: function (callback) {\r\n        Socket.on(SocketEventName.receiveMessage, (data) => {\r\n            if (Helper.isFn(callback)) callback(data);\r\n        })\r\n    },\r\n    onOnlineUsers: function (callback) {\r\n        Socket.on(SocketEventName.onlineUsers, (data) => {\r\n            if (Helper.isFn(callback)) callback(data);\r\n        })\r\n    },\r\n    onTyping: function (callback) {\r\n        Socket.on(SocketEventName.typing, (data) => {\r\n            if (Helper.isFn(callback)) callback(data);\r\n        })\r\n    },\r\n    onStopTyping: function (callback) {\r\n        Socket.on(SocketEventName.stopTyping, (data) => {\r\n            if (Helper.isFn(callback)) callback(data);\r\n        })\r\n    },\r\n\r\n    // NOTIFICATION\r\n    onNewMessageNotification: function (callback) {\r\n        Socket.on(SocketEventName.newMessageNotification, callback)\r\n    },\r\n\r\n    // FRIEND ACTIONS\r\n    onFriendAccepted: function (callback) {\r\n        Socket.on(SocketEventName.friendAccepted, callback)\r\n    },\r\n    onFriendRequested: function (callback) {\r\n        Socket.on(SocketEventName.friendRequested, callback)\r\n    },\r\n    onFriendUnFriend: function (callback) {\r\n        Socket.on(SocketEventName.friendUnfriend, callback)\r\n    },\r\n    onFriendRequestCanceled: function (callback) {\r\n        Socket.on(SocketEventName.friendRequestCanceled, callback)\r\n    },\r\n    onFriendRejected: function (callback) {\r\n        Socket.on(SocketEventName.friendRejected, callback)\r\n    },\r\n    off: function (eventName) {\r\n        Socket.off(eventName);\r\n    },\r\n}\r\nexport default MySocket","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\n\r\nexport const loginThunk = createAsyncThunk('auth/login', async ({ username, password, }) => {\r\n    const response = await UserApi.findByUsernameAndPassword(username, password);\r\n    return response;\r\n})\r\n\r\nexport const sentFriendRequestThunk = createAsyncThunk('auth/sentFriendRequest', async ({ id, friendId, }) => {\r\n    const response = await UserApi.sentFriendRequest(id, friendId);\r\n    return response;\r\n})\r\n\r\nconst initialState = {\r\n    isLogged: false,\r\n    user: null,\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n\r\nconst loginWithUser = (state, action) => {\r\n    MySocket.emitSignIn(action.payload);\r\n    state.user = action.payload;\r\n    state.isLogged = true;\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        login: (state, action) => {\r\n            loginWithUser(state, action)\r\n        },\r\n        updateUser: (state, action) => {\r\n            state.user = action.payload;\r\n        },\r\n        signOut: (state) => {\r\n            MySocket.emitSignOut(state.user);\r\n            state.user = null;\r\n            state.isLogged = false;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        // LOGIN\r\n        [loginThunk.pending]: (state, action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [loginThunk.fulfilled]: (state, action) => {\r\n            const { payload, status } = action.payload;\r\n\r\n            if (status === 'succeeded') {\r\n                loginWithUser(state, { payload });\r\n                state.error = null;\r\n            } else state.error = 'not found';\r\n            state.status = 'succeeded'\r\n        },\r\n        [loginThunk.rejected]: (state, action) => {\r\n            state.error = action.error.message\r\n            state.status = 'failed'\r\n        },\r\n\r\n        // FRIENDS\r\n        [sentFriendRequestThunk.fulfilled]: (state, action) => {\r\n        },\r\n\r\n    }\r\n});\r\n\r\nconst selectors = {\r\n    isLogged: (state) => {\r\n        return state.auth.isLogged;\r\n    },\r\n    authUser: (state) => {\r\n        return state.auth.user;\r\n    },\r\n    status: (state) => {\r\n        return state.auth.status;\r\n    },\r\n    authError: (state) => {\r\n        return state.auth.error;\r\n    },\r\n    authUserId: (state) =>{\r\n        return state.auth.user._id;\r\n    }\r\n}\r\n\r\nexport const { authError, status, isLogged, authUser,  authUserId} = selectors;\r\n\r\n\r\nexport const {\r\n    signOut, login, updateUser\r\n} = authSlice.actions\r\n\r\nexport default authSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    type: 'light',\r\n}\r\n\r\nconst themeSLice = createSlice({\r\n    name: 'theme',\r\n    initialState,\r\n    reducers: {\r\n        switchThemeType: (state) => {\r\n            state.type = (state.type === 'light') ? 'dark' : 'light';\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    switchThemeType\r\n} = themeSLice.actions\r\nexport default themeSLice.reducer","import React, { useEffect } from 'react'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DayIcon from '@material-ui/icons/Brightness7';\r\nimport NightIcon from '@material-ui/icons/Brightness4';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { switchThemeType } from '../../GeneralSlices/themeSlice';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nexport default function DayNightSwitch() {\r\n    const theme = useSelector((state) => { return state.theme });\r\n    const dispatch = useDispatch();\r\n    const [cookies, setCookie, removeCookie] = useCookies(['theme'])\r\n\r\n    useEffect(() => {\r\n        if (cookies.theme) {\r\n            if (cookies.theme.type) {\r\n                if (cookies.theme.type !== theme.type) {\r\n                    dispatch(switchThemeType());\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    const onSwitch = () => {\r\n        let cookieValue = { ...theme, type: theme.type === 'light' ? 'dark' : 'light', };\r\n        setCookie('theme', JSON.stringify(cookieValue));\r\n        dispatch(switchThemeType());\r\n    }\r\n\r\n    return (\r\n        <IconButton aria-label=\"Day / night toggle\" onClick={onSwitch} color=\"inherit\">\r\n            {(theme.type === 'light') ? <NightIcon></NightIcon> : <DayIcon></DayIcon>}\r\n        </IconButton>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        right: -3,\r\n        top: 5,\r\n        border: '1px solid white',\r\n        padding: '0 4px',\r\n    },\r\n}))(Badge);\r\n\r\nexport default function IconWithBadge({ badgeContent, children, ...rest }) {\r\n    return (\r\n        <IconButton color=\"inherit\" {...rest}>\r\n            <StyledBadge badgeContent={badgeContent || ''} color=\"primary\">\r\n                {children}\r\n            </StyledBadge>\r\n        </IconButton>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function RouterLink({ children, ...rest }) {\r\n    return (\r\n        <Link {...rest} style={{all: 'unset'}}>{children}</Link>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport IconWithBadge from '../IconWithBadge';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Hidden, IconButton, Tooltip } from '@material-ui/core';\r\nimport RouterLink from '../RouterLink/RouterLink';\r\n\r\nexport default function Notifications() {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* \r\n            <IconWithBadge badgeContent=\"10\">\r\n                <MailIcon></MailIcon>\r\n            </IconWithBadge>\r\n             */}\r\n            {/* \r\n            <IconWithBadge badgeContent=\"10\" onClick={() => {\r\n                history.push('/friends');\r\n            }}>\r\n            </IconWithBadge>\r\n              */}\r\n            <Hidden xsDown>\r\n                <RouterLink to=\"/chat/new\">\r\n                    <Tooltip title=\"Chat\">\r\n                        <IconButton color=\"inherit\">\r\n                            <MessageIcon></MessageIcon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </RouterLink>\r\n            </Hidden>\r\n            <RouterLink to=\"/friends\">\r\n                <Tooltip title=\"Friends\">\r\n                    <IconButton color=\"inherit\">\r\n                        <PeopleAltIcon></PeopleAltIcon>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </RouterLink>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","export const LOGGED_USER = 'loggedUser';","import React from 'react'\r\nimport MyAvatar from '../MyAvatar/MyAvatar';\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Box, Button, makeStyles } from '@material-ui/core'\r\n\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport Slt from '../../defines/Slt'\r\nimport { Link, useHistory, useLocation } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { isLogged, authUser, status } from '../../features/auth/authSlice'\r\nimport { signOut } from '../../features/auth/authSlice';\r\nimport { useCookies } from 'react-cookie'\r\nimport DayNightSwitch from '../DayNightSwitch/DayNightSwitch'\r\nimport Notifications from '../Notifications/Notifications';\r\nimport RunAction from '../RunAction/RunAction';\r\nimport { LOGGED_USER } from '../../defines/CookieName';\r\n\r\nexport default function Header(props) {\r\n    const [cookies, setCookie, removeCookie] = useCookies(LOGGED_USER);\r\n    const user = useSelector(authUser);\r\n    const dispatch = useDispatch();\r\n    const logged = useSelector(isLogged);\r\n    const authStatus = useSelector(status);\r\n    const location = useLocation();\r\n    const pathName = location.pathname;\r\n    const history = useHistory();\r\n\r\n    const onSignout = () => {\r\n        removeCookie(LOGGED_USER);\r\n        dispatch(signOut());\r\n        history.push('/');\r\n    }\r\n\r\n    const toolsHtml = (\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n            <Box mr={4}>\r\n                {logged\r\n                    ? <Notifications></Notifications>\r\n                    : null\r\n                }\r\n            </Box>\r\n            {/* \r\n            <RunAction></RunAction>\r\n             */}\r\n            <DayNightSwitch></DayNightSwitch>\r\n            {(logged)\r\n                ? (\r\n                    <MyAvatar name={user.name} single={user.single} picture={user.picture}></MyAvatar>\r\n                )\r\n                : null}\r\n            <Button\r\n                disabled={pathName === '/login'}\r\n                startIcon={(!logged)\r\n                    ? <PersonIcon></PersonIcon>\r\n                    : null}\r\n                color=\"inherit\"\r\n                onClick={() => {\r\n                    onSignout();\r\n                }}>\r\n                <Typography >{(logged)\r\n                    ? 'Sign out'\r\n                    : 'Sign in'}</Typography>\r\n            </Button>\r\n        </Box>\r\n    )\r\n\r\n    return (\r\n        <AppBar className=\"header\" position=\"static\" color=\"primary\" id={Slt.mainAppBar}>\r\n            <Toolbar\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between'\r\n                }}>\r\n                <Typography variant=\"h6\">\r\n                    <Link to=\"/chat\" color=\"inherit\" style={{ color: 'white', textDecoration: 'none' }}>\r\n                        Messenger\r\n                        </Link>\r\n                </Typography>\r\n                {(authStatus !== 'loading') ? toolsHtml : null}\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n","import { createStyles, makeStyles } from \"@material-ui/core\";\r\n\r\nconst colors = {\r\n    lightGray: '#F0F2F5',\r\n}\r\n\r\nconst mainStyles = makeStyles(theme => createStyles({\r\n    table: {\r\n        minWidth: 650\r\n    },\r\n    chatSection: {\r\n        width: '100%',\r\n        height: '400px',\r\n        overflow: 'auto'\r\n    },\r\n    headBG: {\r\n        backgroundColor: '#e0e0e0'\r\n    },\r\n    borderRight500: {\r\n        borderRight: '1px solid #e0e0e0'\r\n    },\r\n    borderLeft500: {\r\n        borderLeft: '1px solid #e0e0e0'\r\n    },\r\n    messageArea: {\r\n        height: '70vh',\r\n        overflowY: 'auto'\r\n    },\r\n    RoundLightGrayInputStyle: {\r\n        paddingLeft: '10px',\r\n        paddingRight: '10px',\r\n        backgroundColor: colors.lightGray,\r\n        borderRadius: '50px',\r\n    },\r\n    buttonStyle: {\r\n        textTransform: 'none',\r\n    },\r\n    flexCenterVerticalStyle: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    flexCenterStyle: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    defaultContainerPaddingStyle: {\r\n        root: {\r\n            '& > *': {\r\n                padding: theme.spacing(2),\r\n            }\r\n        }\r\n    }\r\n}));\r\n\r\nexport default mainStyles;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\n\r\nexport default function MyAvatarGroup({ items, max = 2 }) {\r\n    const avatars = items.slice(0, max).map((item, index) => {\r\n        return <Avatar key={index} alt={item.name} src={item.src} />;\r\n    })\r\n    return (\r\n        <AvatarGroup max={max} spacing=\"small\">\r\n            {avatars}\r\n        </AvatarGroup>\r\n    );\r\n}\r\n","import Axios from \"axios\";\r\nimport { API_ADDRESS } from \"../Config\";\r\nimport Helper from \"../Helper\";\r\nimport MySocket from '../Socket/MySocket';\r\n\r\nconst prefix = `${API_ADDRESS}/conversation`;\r\n\r\nconst ConversationApi = {\r\n    findConversationById: async function (id) {\r\n        const data = await Axios.get(`${prefix}/getConversationById`, {\r\n            params: {\r\n                id\r\n            }\r\n        });\r\n        return data.data;\r\n    },\r\n    findConversationByMemberIds: async function (ids) {\r\n        const data = await Axios.post(`${prefix}/getConversationByMemberIds`, {\r\n            ids\r\n        });\r\n        return data.data;\r\n    },\r\n    findSidebarConversationById: async function (id) {\r\n        const data = await Axios.get(`${prefix}/getSidebarConversationById`, {\r\n            params: {\r\n                id\r\n            }\r\n        });\r\n        return data.data;\r\n    },\r\n    listConversationsForListDisplay: async function (id) {\r\n        const data = await Axios.get(`${prefix}/listConversationsForListDisplay`, {\r\n            params: {\r\n                id\r\n            }\r\n        });\r\n        return data.data;\r\n    },\r\n    findConversationInfoByUserIdsOrCreateIfNotExist: async function (ids) {\r\n        const data = await Axios.post(`${prefix}/getConversationInfoByUserIdsOrCreateIfNotExist`, { ids });\r\n        return data.data;\r\n    },\r\n    getHomeConversation: async function () {\r\n        const data = await Axios.get(`${prefix}/home`);\r\n        return data.data;\r\n    },\r\n    createConversationWithMemberIds: async function (ids, messageParams = null) {\r\n        const data = await Axios.post(`${prefix}/createConversationWithMemberIds`, { ids, messageParams });\r\n        return data.data;\r\n    }\r\n}\r\nexport default ConversationApi;","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\n\r\nexport const fetchConversationByMemberIds = createAsyncThunk('chat/conversation', async (ids) => {\r\n    const response = await ConversationApi.findConversationByMemberIds(ids);\r\n    return response;\r\n})\r\n\r\nexport const fetchConversationById = createAsyncThunk('chat/conversation', async (id) => {\r\n    const response = await ConversationApi.findConversationById(id);\r\n    return response;\r\n})\r\n\r\nexport const fetchConversationByUserIdsOrCreateIfNotExist = createAsyncThunk('chat/conversation', async (ids) => {\r\n    const response = await ConversationApi.findConversationByUserIdsOrCreateIfNotExist(ids);\r\n    return response;\r\n})\r\n\r\nexport const fetchHomeConversation = createAsyncThunk('chat/conversation', async () => {\r\n    const response = await ConversationApi.getHomeConversation();\r\n    return response;\r\n})\r\n\r\nconst initialState = {\r\n    conversation: {},\r\n    sidebarConversations: [],\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n\r\nconst ChatSlice = createSlice({\r\n    name: 'chat',\r\n    initialState,\r\n    reducers: {\r\n        appendMessage: (state, action) => {\r\n            state.conversation.messages.push(action.payload);\r\n        },\r\n        reset: (state, action) => {\r\n            state.conversation = {};\r\n            state.status = 'idle';\r\n            state.error = null;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        'chat/conversation/pending': (state, action) => {\r\n            state.status = 'loading'\r\n        },\r\n        'chat/conversation/fulfilled': (state, action) => {\r\n            const { payload, status } = action.payload;\r\n\r\n            if (status === 'succeeded') {\r\n                state.conversation = payload;\r\n                state.error = null;\r\n            } else state.error = 'not found';\r\n            state.status = 'succeeded'\r\n        },\r\n        'chat/conversation/rejected': (state, action) => {\r\n            state.error = action.error.message\r\n            state.status = 'failed'\r\n        },\r\n    }\r\n});\r\n\r\nconst selectors = {\r\n    conversation: (state) => {\r\n        return state.chat.conversation;\r\n    },\r\n    conversationMessages: (state) => {\r\n        return state.chat.conversation.messages || [];\r\n    },\r\n    conversationId: (state) => {\r\n        return state.chat.conversation._id;\r\n    },\r\n    conversationStatus: (state) => {\r\n        return state.chat.status;\r\n    },\r\n    conversationError: (state) => {\r\n        return state.chat.error;\r\n    },\r\n    conversationMemberIds: (state) => {\r\n        return state.chat.conversation.members;\r\n    }\r\n}\r\n\r\nexport const { conversationStatus, conversationError, conversation, conversationMemberIds, conversationId, conversationMessages } = selectors;\r\n\r\nexport const {reset, appendMessage } = ChatSlice.actions\r\n\r\nexport default ChatSlice.reducer;","import { Box } from '@material-ui/core';\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Helper from '../../defines/Helper';\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport { conversationMemberIds } from '../../features/chat/ChatSlice';\r\n\r\nexport default function ConversationLink({ children, item, ...rest }) {\r\n    const history = useHistory();\r\n    const user = useSelector(authUser) || {};\r\n    const convoMemberIds = useSelector(conversationMemberIds);\r\n    const onItemClick = async () => {\r\n        const showConversation = async () => {\r\n            const data = await ConversationApi.findConversationInfoByUserIdsOrCreateIfNotExist([user._id, item._id]);\r\n            const { status, payload } = data;\r\n            if (status === 'succeeded') {\r\n                const { members, isNew, _id: conversationId } = payload;\r\n                if (isNew) {\r\n                    //const memberIds = Helper.getArrayOfFieldValue(members, '_id', 'string');\r\n                    MySocket.emitJoinUsersToConversation(members, conversationId);\r\n                }\r\n                const { _id } = data.payload;\r\n                history.push(`/chat/t/${_id}`);\r\n            }\r\n        }\r\n        if (!convoMemberIds) await showConversation();\r\n        else if (Helper.arrayDiff(convoMemberIds, [user._id, item._id]).length > 0) await showConversation();\r\n    }\r\n    return (\r\n        <Box {...rest} onClick={onItemClick}> {children}</Box>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MyAvatar from '../MyAvatar/MyAvatar';\r\nimport MyAvatarGroup from '../MyAvatarGroup/MyAvatarGroup';\r\nimport { Avatar, Box, Hidden, ListItemAvatar, makeStyles } from '@material-ui/core';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport ConversationLink from '../ConversationLink/ConversationLink';\r\nimport RouterLink from '../RouterLink/RouterLink';\r\nimport { conversationId } from '../../features/chat/ChatSlice';\r\n\r\nconst useStyle = makeStyles({\r\n    truncateListItemStyle: {\r\n        '& > p': {\r\n            overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap'\r\n        }\r\n    }\r\n})\r\n\r\nconst GenerateAvatarGroup = ({ items }) => {\r\n    items = items.map((item) => {\r\n        return {\r\n            name: item.username,\r\n            src: item.picture,\r\n        }\r\n    })\r\n    return <MyAvatarGroup items={items}></MyAvatarGroup>\r\n}\r\n\r\n\r\nexport default function ConversationItem({ item, online, icon }) {\r\n    const classes = useStyle();\r\n    const user = useSelector(authUser);\r\n    const convoId = useSelector(conversationId);\r\n    const { members } = item;\r\n    const friends = members.filter((item) => {\r\n        return item._id !== user._id;\r\n    })\r\n    let name, lastMessageText = null;\r\n    if (members.length === 2) {\r\n        name = friends[0].username;\r\n    } else {\r\n        name = `${friends[0].username} and ${friends.length - 1} others`;\r\n    }\r\n    if (item.lastMessage) {\r\n        let prefix = (item.lastMessage) ? (item.lastMessage.from._id === user._id ? 'you: ' : (friends.length > 1 ? `${item.lastMessage.from.username}: ` : null)) : null;\r\n        lastMessageText = prefix !== null ? `${prefix} ${item.lastMessage.text}` : item.lastMessage.text;\r\n    }\r\n    return (\r\n        <RouterLink to={`/chat/t/${item._id}`}>\r\n            <ListItem button selected={convoId === item._id}>\r\n                <ListItemAvatar style={{ width: '90px' }}>\r\n                    {\r\n                        icon ? (<Avatar> {icon} </Avatar>) :\r\n                            (\r\n                                members.length === 2\r\n                                    ? <MyAvatar online={online} name={name} single={true} picture={friends[0].picture}></MyAvatar>\r\n                                    : <GenerateAvatarGroup items={friends}></GenerateAvatarGroup>\r\n                            )\r\n                    }\r\n                </ListItemAvatar>\r\n                <Hidden xsDown>\r\n                    <ListItemText className={classes.truncateListItemStyle} primary={name} secondary={lastMessageText}></ListItemText>\r\n                </Hidden>\r\n            </ListItem >\r\n        </RouterLink>\r\n    )\r\n}\r\n","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit'\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\n\r\nexport const fetchConversations = createAsyncThunk('sidebarConversations/fetchConversations', async ({ id }) => {\r\n    const response = await ConversationApi.listConversationsForListDisplay(id)\r\n    return response;\r\n})\r\n\r\nexport const fetchAndPrependConversationById = createAsyncThunk('sidebarConversations/fetchAndPrependConversationById', async ({ id }) => {\r\n    const response = await ConversationApi.findSidebarConversationById(id)\r\n    return response;\r\n})\r\n\r\nconst conversationsAdapter = createEntityAdapter({\r\n    selectId: item => item._id,\r\n    sortComparer: (a, b) => -(a.lastMessage.time - b.lastMessage.time)\r\n})\r\n\r\nconst initialState = conversationsAdapter.getInitialState({\r\n    status: 'idle',\r\n    error: null\r\n})\r\n\r\n\r\nconst SidebarConversationsSlice = createSlice({\r\n    name: 'sidebarConversations',\r\n    initialState,\r\n    reducers: {\r\n        updateLastMessage: (state, action) => {\r\n            const { id, message } = action.payload;\r\n            const item = state.entities[id];\r\n            if (item) {\r\n                item.lastMessage = message;\r\n                conversationsAdapter.upsertOne(state, item)\r\n            } else {\r\n                fetchAndPrependConversationById({ id });\r\n            }\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchAndPrependConversationById.fulfilled]: (state, action) => {\r\n            const { payload, status } = action.payload;\r\n            if (status === 'succeeded') conversationsAdapter.upsertOne(state, payload);\r\n        },\r\n        [fetchConversations.pending]: (state, action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchConversations.fulfilled]: (state, action) => {\r\n            const { payload, status } = action.payload;\r\n            if (status === 'succeeded') {\r\n                conversationsAdapter.upsertMany(state, payload)\r\n                state.error = null;\r\n            } else state.error = 'not found';\r\n            state.status = 'succeeded'\r\n        },\r\n\r\n    }\r\n\r\n});\r\n\r\nconst selectors = {\r\n    isConversationExist: (state, id) => {\r\n        return (state.sidebarConversations.ids.indexOf(id) > -1)\r\n    }\r\n}\r\n\r\nexport const { isConversationExist } = selectors;\r\nexport const {\r\n    selectAll: selectAllSidebarConversations,\r\n    selectById: selectSidebarConversationById,\r\n    selectIds: selectSidebarConversationIds\r\n    // Pass in a selector that returns the posts slice of state\r\n} = conversationsAdapter.getSelectors(state => state.sidebarConversations)\r\n\r\n\r\nexport const {\r\n    updateLastMessage\r\n} = SidebarConversationsSlice.actions\r\nexport default SidebarConversationsSlice.reducer","import React, { useEffect, useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport SearchBar from '../SearchBar/SearchBar'\r\nimport { Box, Hidden } from '@material-ui/core'\r\nimport mainStyles from '../../defines/styles/MainStyles'\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ConversationItem from '../ConversationItem/ConversationItem'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchAndPrependConversationById, fetchConversations, selectAllSidebarConversations, selectSidebarConversationIds, updateLastMessage } from '../../features/sidebarConversations/SidebarConversationsSlice'\r\nimport { authUser } from '../../features/auth/authSlice'\r\nimport MySocket from '../../defines/Socket/MySocket'\r\nimport SocketEventName from '../../defines/Socket/SocketEventName'\r\nimport Socket from '../../defines/Socket'\r\nimport { conversationId } from '../../features/chat/ChatSlice'\r\n\r\n\r\nexport default function ConversationList() {\r\n    const classes = mainStyles();\r\n    const dispatch = useDispatch();\r\n    const conversations = useSelector(selectAllSidebarConversations);\r\n    const loggedUser = useSelector(authUser);\r\n    const ids = useSelector(selectSidebarConversationIds);\r\n    const convoId = useSelector(conversationId);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchConversations({ id: loggedUser._id }));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const myFunc = (data) => {\r\n            const { message, conversationId } = data;\r\n            if (ids.indexOf(conversationId) > -1) {\r\n                dispatch(updateLastMessage({ id: conversationId, message }));\r\n            } else {\r\n                dispatch(fetchAndPrependConversationById({ id: conversationId }));\r\n            }\r\n        }\r\n        MySocket.onNewMessageNotification(myFunc)\r\n        return () => {\r\n            Socket.removeListener(SocketEventName.newMessageNotification, myFunc);\r\n        }\r\n    }, [convoId, ids])\r\n\r\n\r\n    const conversationsHtml = conversations.map((item, i) => {\r\n        return (\r\n            <ConversationItem key={i} item={item}></ConversationItem>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <List className=\"left-sidebar custom-scrollbar\">\r\n            {conversationsHtml}\r\n        </List>\r\n    )\r\n}\r\n\r\n        //{/* \r\n         //*/}\r\n        //<Grid className=\"left-sidebar\" container >\r\n            //{/* SEARCH BAR */}\r\n            //{/* \r\n            //<Grid item xs={12}>\r\n                //<Box my={2}>\r\n                    //<SearchBar></SearchBar>\r\n                //</Box>\r\n            //</Grid>\r\n             //*/}\r\n\r\n            //<Grid item xs={12} >\r\n                //{/* \r\n                //<Box mt={2} >\r\n                    //<HomeConversationItem></HomeConversationItem>\r\n                //</Box>\r\n                 //*/}\r\n            //</Grid>\r\n        //</Grid>\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nconst initialState = {\r\n    enabled: false,\r\n    receivers: [],\r\n}\r\n\r\nconst NewChatSlice = createSlice({\r\n    name: 'newChat',\r\n    initialState,\r\n    reducers: {\r\n        setEnabled: (state, action) => {\r\n            state.enabled = action.payload;\r\n        },\r\n        removeReceiverById: (state, action) => {\r\n            state.receivers = state.receivers.filter((item) => {\r\n                return item._id !== action.payload;\r\n            })\r\n        },\r\n        appendReceiver: (state, action) => {\r\n            state.receivers.push(action.payload);\r\n        },\r\n        removeLastReceiver: (state, action) => {\r\n            if (state.receivers.length > 0) {\r\n                state.receivers = (state.receivers.slice(0, -1));\r\n            }\r\n        },\r\n        reset: (state, action) => {\r\n            state.enabled = initialState.enabled;\r\n            state.receivers = initialState.receivers;\r\n        }\r\n    }\r\n});\r\n\r\nconst selectors = {\r\n    isNewChatEnable: (state) => {\r\n        return state.newChat.enabled\r\n    },\r\n    newChatReceivers: (state) => {\r\n        return state.newChat.receivers\r\n    },\r\n    newChatReceiver: (state) => {\r\n        if (state.newChat.receivers.length === 1) return state.newChat.receivers[0];\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const { newChatReceivers, isNewChatEnable, newChatReceiver } = selectors;\r\n\r\nexport const {\r\n    removeReceiverById: removeNewChatReceiverById,\r\n    appendReceiver: appendNewChatReceiver,\r\n    removeLastReceiver: removeLastNewChatReceiver,\r\n    setEnabled: setNewChatEnabled,\r\n    reset: resetNewChat,\r\n} = NewChatSlice.actions\r\nexport default NewChatSlice.reducer","import { Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport default function Loading() {\r\n    return (\r\n        <Typography align=\"center\" className=\"text-muted\">Loading...</Typography>\r\n    )\r\n}\r\n","import { Box, Grid, Tooltip, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MyAvatar from '../MyAvatar/MyAvatar';\r\nimport MyTime from '../../defines/MyTime';\r\n\r\nexport default function Message({ notShowAvatar, ownMessage, time, user, message }) {\r\n    const avatar = !notShowAvatar ? (<MyAvatar sizeInPixel={20} name={user.username} picture={user.picture}></MyAvatar>) : null;\r\n    const position = (ownMessage) ? 'right' : 'left';\r\n    const flexPos = (ownMessage) ? 'flex-end' : 'flex-start';\r\n    const placement = (ownMessage) ? 'bottom-start' : 'bottom-end';\r\n    return (\r\n        <ListItem key=\"1\">\r\n            <Box width=\"100%\" style={{ display: 'flex', justifyContent: flexPos, alignItems: 'flex-end' }}>\r\n                {/* AVATAR */}\r\n                {!ownMessage ? avatar : null}\r\n\r\n                {/* MESSAGE AND TIME */}\r\n                <Box className={`message ${position}-message ${!ownMessage && notShowAvatar ? 'ml-avatar' : ''}`}>\r\n                    <Tooltip title={MyTime.getMessageTimeString(MyTime.getCurrentTimeByUTCTime(time))} placement={placement}>\r\n                        <ListItemText align={position} primary={message} ></ListItemText>\r\n                    </Tooltip>\r\n                </Box>\r\n            </Box>\r\n\r\n        </ListItem>\r\n    )\r\n}\r\n","import { Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport default function ChatNotification({ username, type }) {\r\n    let usernameHtml = <Typography component=\"span\" color=\"primary\">{username}</Typography>;\r\n    let content;\r\n    switch (type) {\r\n        case 'welcome-current-user-notification':\r\n            content = 'Welcome to the chat room.';\r\n            break;\r\n        case 'welcome-other-user-notification':\r\n            content = <span>{usernameHtml} has joined the chat.</span>;\r\n            break;\r\n        case 'user-left-notification':\r\n            content = <span>{usernameHtml} has left the chat.</span>;\r\n            break;\r\n        default:\r\n            content = '';\r\n    }\r\n    return (\r\n        <Typography align=\"center\" className=\"text-muted\">{content}</Typography>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Box, List, Typography } from '@material-ui/core'\r\nimport Message from '../Message/Message'\r\nimport mainStyle from '../../defines/styles/MainStyles'\r\nimport { useSelector } from 'react-redux';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport ChatNotification from '../ChatNotification/ChatNotification';\r\nimport './Messages.css'\r\nimport { isNewChatEnable } from '../../features/NewChat/NewChatSlice';\r\n\r\nconst emptyHtml = (\r\n    <React.Fragment>\r\n        <Box mt={4}>\r\n            <Typography className=\"text-muted\" align=\"center\" >Let's start a conversation.</Typography>\r\n        </Box>\r\n    </React.Fragment>\r\n)\r\n\r\nconst scroll = () => {\r\n    let containers = document.getElementsByClassName('chat-box-messages-wrapper');\r\n    containers[0].scrollTop = containers[0].scrollHeight;\r\n}\r\n\r\nexport default function Messages({ messages }) {\r\n    const classes = mainStyle();\r\n    const user = useSelector(authUser);\r\n    const newChatEnabled = useSelector(isNewChatEnable);\r\n\r\n    // messages\r\n    const messagesHtml = messages.map((item, index) => {\r\n        if (item.from) {\r\n            let notShowAvatar = false;\r\n            if (index < messages.length - 1) {\r\n                const nextItem = messages[index + 1];\r\n                notShowAvatar = (nextItem.type === 'message') ? nextItem.from.username === item.from.username : false;\r\n            }\r\n            return <Message notShowAvatar={notShowAvatar} ownMessage={item.from.username === user.username} key={index} user={item.from} message={item.text} time={item.time}></Message>\r\n        } else {\r\n            return <ChatNotification key={index} username={item.user.username} type={item.type}></ChatNotification>\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        scroll();\r\n    }, [messages])\r\n\r\n    return (\r\n        <List className=\"chat-box-messages-wrapper custom-scrollbar\" style={{ top: (newChatEnabled) ? '57px' : '0' }} >\r\n            {messagesHtml.length > 0 ? messagesHtml : (!newChatEnabled ? emptyHtml : null)}\r\n        </List>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Grid, TextField, Fab, Button, IconButton } from '@material-ui/core'\r\nimport { Send as SendIcon } from '@material-ui/icons'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setNotify } from '../../features/notify/NotifySlice';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport { conversation } from '../../features/chat/ChatSlice';\r\nimport Message from '../../defines/Message';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { isNewChatEnable, newChatReceivers } from '../../features/NewChat/NewChatSlice';\r\nimport Helper from '../../defines/Helper';\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\n\r\nlet myTimeoutObj;\r\nexport default function SendingInput() {\r\n    const [inputMsg, setInputMsg] = useState('');\r\n    const [isTyping, setTyping] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const user = useSelector(authUser);\r\n    const convo = useSelector(conversation);\r\n    const receivers = useSelector(newChatReceivers);\r\n    const newChatEnabled = useSelector(isNewChatEnable);\r\n\r\n    // INPUT CHANGE\r\n    const onInputChange = (e) => {\r\n        setInputMsg(e.target.value);\r\n    }\r\n\r\n    // ON SENDING MESSAGE\r\n    const onSendingMessageClick = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputMsg.trim() === '') dispatch(setNotify({ message: Message.PleaseTypeMessage, open: true, timeout: 2000 }))\r\n        else {\r\n            if (convo._id) {\r\n                onSendingMessage();\r\n            } else {\r\n                if (newChatEnabled && receivers.length > 0) {\r\n                    onCreateConversationsWithReceicersAndFristMessage();\r\n                } else {\r\n                    dispatch(setNotify({ message: Message.PleaseChooseReceiver, open: true, timeout: 2000 }))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const onSendingMessage = () => {\r\n        //MySocket.emitSendMessage(user, inputMsg);\r\n        MySocket.emitSendMessage(user, inputMsg, convo._id);\r\n        setInputMsg('');\r\n        if (newChatEnabled) history.push(`/chat/t/${convo._id}`)\r\n    }\r\n\r\n    const onCreateConversationsWithReceicersAndFristMessage = async () => {\r\n        const receiverIds = Helper.getArrayOfFieldValue(receivers, '_id').concat(user._id);\r\n        const data = await ConversationApi.createConversationWithMemberIds(receiverIds);\r\n        const { status, payload } = data;\r\n        if (status === 'succeeded') {\r\n            MySocket.emitJoinUsersToConversation(payload.members, payload._id);\r\n            MySocket.emitSendMessage(user, inputMsg, payload._id);\r\n            setInputMsg('');\r\n            history.push(`/chat/t/${payload._id}`);\r\n        }\r\n    }\r\n\r\n    const emitTyping = () => {\r\n        if (!isTyping && inputMsg.trim() !== '') MySocket.emitTyping(user, convo._id);\r\n        setTyping(true);\r\n        clearTimeout(myTimeoutObj);\r\n        myTimeoutObj = setTimeout(() => {\r\n            emitStopTyping();\r\n        }, 2000);\r\n    }\r\n\r\n    const emitStopTyping = () => {\r\n        if (isTyping) {\r\n            MySocket.emitStopTyping(user.username, convo._id);\r\n            setTyping(false);\r\n        }\r\n    }\r\n\r\n    // SOLVE TYPING\r\n    const onKeyUp = (e) => {\r\n        if (e.which !== 13) {\r\n            if (inputMsg.length > 3) emitTyping();\r\n        } else {\r\n            emitStopTyping();\r\n        }\r\n    }\r\n\r\n    const onBlur = () => {\r\n        emitStopTyping();\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(e) => { onSendingMessageClick(e) }}>\r\n            <Grid container >\r\n                <Grid item xs={10} md={11}>\r\n                    <TextField\r\n                        autoFocus={true}\r\n                        inputProps={{\r\n                            autoComplete: 'off'\r\n                        }}\r\n                        value={inputMsg} id=\"outlined-basic-email\" fullWidth onChange={onInputChange} onKeyUp={onKeyUp} onBlur={onBlur} />\r\n                </Grid>\r\n                <Grid item xs={2} md={1} align=\"center\">\r\n                    <IconButton color=\"primary\" type=\"submit\"> <SendIcon /> </IconButton>\r\n                </Grid>\r\n            </Grid>\r\n        </form >\r\n    )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    message: '',\r\n    type: '',\r\n    open: false,\r\n    timeout: 4000,\r\n}\r\n\r\nconst NotifySlice = createSlice({\r\n    name: 'notify',\r\n    initialState,\r\n    reducers: {\r\n        setNotify: (state, action) => {\r\n            const { message, type, open, timeout } = action.payload;\r\n            if (open) {\r\n                state.message = message || '';\r\n                state.type = type || '';\r\n                state.timeout = timeout || 6000;\r\n            }\r\n            state.open = open || false;\r\n        }\r\n    }\r\n})\r\n\r\nconst selectors = {\r\n    open: (state) => {\r\n        return state.notify.open;\r\n    },\r\n    message: (state) => {\r\n        return state.notify.message;\r\n    },\r\n    type: (state) => {\r\n        return state.notify.type;\r\n    },\r\n    timeout: (state) => {\r\n        return state.notify.timeout;\r\n    },\r\n};\r\nexport const { open, message, type, timeout } = selectors;\r\n\r\nexport const {\r\n    setNotify\r\n} = NotifySlice.actions\r\nexport default NotifySlice.reducer;","const Message = {\r\n    // form\r\n    invalid: `{0} invalid`,\r\n\r\n    // system\r\n    fail: `Something went wrong`,\r\n    welcomeNewAccount: `Hello {0}, let's start a chat with your fiends!`,\r\n    PleaseTypeMessage: `Please type some message to send!`,\r\n    PleaseChooseReceiver: `Please choose receiver!`,\r\n    newMessage: `{0}: {1}`,\r\n\r\n    // friend\r\n    friendRequested: `{0} sent you a friend request.`,\r\n    unfriended: `{0} unfriended you.`,\r\n    friendAccepted: `{0} accepted your friend request.`,\r\n\r\n\r\n}\r\nexport default Message;","import { Box, Paper } from '@material-ui/core'\r\nimport React from 'react'\r\nimport SendingInput from '../SendingInput/SendingInput'\r\n\r\nexport default function SendMessageBar({ type }) {\r\n    return (\r\n        <Paper style={{boxShadow:'none'}} className=\"sending-message-bar-wrapper\">\r\n            <SendingInput type={type}></SendingInput>\r\n        </Paper>\r\n    )\r\n}\r\n","import { Paper } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport MySocket from '../../defines/Socket/MySocket'\r\nimport Socket from '../../defines/Socket'\r\nimport MyAvatar from '../MyAvatar/MyAvatar';\r\nimport SocketEventName from '../../defines/Socket/SocketEventName';\r\n\r\nexport default function UserTyping() {\r\n    const [typingUsers, setTypingUsers] = useState([]);\r\n    useEffect(() => {\r\n        MySocket.onTyping((data) => {\r\n            setTypingUsers(typingUsers.concat(data.user));\r\n        })\r\n        MySocket.onStopTyping((data) => {\r\n            setTypingUsers(typingUsers.filter((user) => {\r\n                return user.username !== data.username;\r\n            }));\r\n        })\r\n        return () => {\r\n            Socket.off(SocketEventName.typing);\r\n            Socket.off(SocketEventName.stopTyping);\r\n        }\r\n    })\r\n\r\n    const typingHtml = typingUsers.map((user) => {\r\n        return (\r\n            <div key={user._id}>\r\n                <div style={{ display: 'flex', alignItems: 'flex-start', }}>\r\n                    <span>\r\n                        <MyAvatar name={user.username} picture={user.picture}> </MyAvatar>\r\n                    </span>\r\n                    <img className=\"typing-icon\" src={`${process.env.PUBLIC_URL}/images/icons/typing-icon.gif`} alt=\"typing\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <Paper elevation={0} style={{ minWidth: '200px' }}>\r\n            {(typingHtml.length > 0 ? typingHtml : null)}\r\n        </Paper>\r\n    )\r\n}\r\n","import { Box, Divider } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\nimport Socket from '../../defines/Socket';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport SocketEventName from '../../defines/Socket/SocketEventName';\r\nimport { authUser, authUserId } from '../../features/auth/authSlice';\r\nimport { appendMessage, conversation, conversationError, conversationMessages, conversationStatus, fetchConversationById, fetchConversationByMemberIds, fetchHomeConversation, reset } from '../../features/chat/ChatSlice';\r\nimport { isNewChatEnable, newChatReceiver } from '../../features/NewChat/NewChatSlice';\r\nimport { updateLastMessage } from '../../features/sidebarConversations/SidebarConversationsSlice';\r\nimport Loading from '../Loading/Loading';\r\nimport Messages from '../Messages/Messages';\r\nimport SendMessageBar from '../SendMessageBar/SendMessageBar';\r\nimport UserTyping from '../UserTyping/UserTyping';\r\n\r\nexport default function NormalChat() {\r\n    const status = useSelector(conversationStatus);\r\n    const messages = useSelector(conversationMessages);\r\n    const convo = useSelector(conversation);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const loggedUserId = useSelector(authUserId);\r\n    const { conversationId } = useParams();;\r\n    const receiver = useSelector(newChatReceiver) || {};\r\n    const newChatEnabled = useSelector(isNewChatEnable);\r\n\r\n    // FETCH CONVERSATION BY FRIEND ID\r\n    useEffect(() => {\r\n        if (newChatEnabled) {\r\n            if (receiver._id) dispatch(fetchConversationByMemberIds([`${loggedUserId}`, `${receiver._id}`]));\r\n            else {\r\n                dispatch(reset());\r\n            }\r\n        }\r\n    }, [receiver._id, newChatEnabled])\r\n\r\n    useEffect(() => {\r\n        if (status === 'succeeded') {\r\n            if (convo._id) MySocket.emitJoinRoom(`${convo._id}_current`);\r\n            else history.replace('/chat/new');\r\n        }\r\n        return () => {\r\n            if (convo._id) MySocket.emitLeaveRoom(`${convo._id}_current`);\r\n        }\r\n    }, [status, convo._id])\r\n\r\n    // FETCH CONVERSATION BY ID\r\n    useEffect(() => {\r\n        if (conversationId) dispatch(fetchConversationById(conversationId))\r\n    }, [conversationId]);\r\n\r\n    // reset\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(reset())\r\n        }\r\n    }, [])\r\n\r\n    // SOCKET EVENTS RECEIVE MESSAGE\r\n    useEffect(() => {\r\n        MySocket.onReceiveMessage((data) => {\r\n            const { conversationId, message } = data;\r\n            if (conversationId === convo._id) {\r\n                const messageObj = {\r\n                    type: 'message',\r\n                    ...message\r\n                }\r\n                dispatch(appendMessage(messageObj));\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            MySocket.off(SocketEventName.receiveMessage);\r\n        }\r\n    }, [messages, convo._id])\r\n\r\n    return (\r\n        <Box >\r\n            {status === 'loading'\r\n                ? <Loading></Loading>\r\n                : <Messages messages={messages}></Messages>\r\n            }\r\n        </Box>\r\n    )\r\n}","import { Avatar, Box, IconButton, ListItemText, TextField, Typography } from '@material-ui/core';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport UserApi from '../../defines/https/UserApi'\r\nimport Helper from '../../defines/Helper'\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport './Receiver.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authUserId } from '../../features/auth/authSlice';\r\nimport SuggestionUsers from '../SuggestionUsers/SuggestionUsers';\r\nimport { removeLastNewChatReceiver, newChatReceivers, removeNewChatReceiverById, appendNewChatReceiver } from '../../features/NewChat/NewChatSlice';\r\n\r\nlet timeout;\r\n\r\nconst SelectedUsers = ({ items, onCloseClick }) => {\r\n    return items.map((item) => {\r\n        return (\r\n            <Alert\r\n                key={item._id}\r\n                className=\"selected-receiver\"\r\n                severity=\"info\"\r\n                icon={false}\r\n                action={\r\n                    <IconButton\r\n                        aria-label=\"close\"\r\n                        color=\"inherit\"\r\n                        size=\"small\"\r\n                        onClick={() => { onCloseClick(item) }} >\r\n                        <CloseIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                }\r\n            > {item.username}</Alert>\r\n        )\r\n    })\r\n}\r\n\r\nexport default function Receiver({ onFriendIdSelected }) {\r\n    const dispatch = useDispatch();\r\n    const [mounted, setMounted] = useState(true);\r\n    const [suggestionUsers, setSuggestionUsers] = useState([]);\r\n    const [inputVal, setInputVal] = useState('');\r\n    const [receiverName, setReceiverName] = useState('');\r\n    const inputRef = useRef(null);\r\n    const loggedUserId = useSelector(authUserId)\r\n    const receivers = useSelector(newChatReceivers);\r\n\r\n    // fetch suggestion users\r\n    useEffect(() => {\r\n        setMounted(true);\r\n        const fetchUsers = async () => {\r\n            const data = await UserApi.findReceivers(receiverName, Helper.getArrayOfFieldValue(receivers, '_id').concat(loggedUserId));\r\n            const { status, payload } = data;\r\n            if (status === 'succeeded') {\r\n                if (mounted) {\r\n                    setSuggestionUsers(payload);\r\n                }\r\n            }\r\n        }\r\n        if (receiverName.trim() !== '') fetchUsers();\r\n        return () => {\r\n            setMounted(false);\r\n        }\r\n    }, [receiverName, receivers, loggedUserId])\r\n\r\n    useEffect(() => {\r\n        if (receivers.length === 1) onFriendIdSelected(receivers[0]._id);\r\n        else onFriendIdSelected(null);\r\n    }, [receivers])\r\n\r\n    // suggestion users\r\n    const onSuggestionUserClick = (item) => {\r\n        dispatch(appendNewChatReceiver(item));\r\n        setInputVal('');\r\n        setReceiverName('');\r\n        setSuggestionUsers([])\r\n        const input = inputRef.current.querySelector('input');\r\n        input.focus();\r\n    }\r\n\r\n    // selected users\r\n    const onRemoveSelectedUser = (item) => {\r\n        dispatch(removeNewChatReceiverById(item._id));\r\n    }\r\n\r\n    const solveSelectedUsers = (e, oldVal, newVal) => {\r\n        if (e.which === 8 && oldVal.trim() === '' && newVal.trim() === '') {\r\n            // pop\r\n            dispatch(removeLastNewChatReceiver());\r\n        }\r\n    }\r\n\r\n    // input events\r\n    const onInputChange = (e) => {\r\n        const value = e.target.value;\r\n        setInputVal(value);\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => {\r\n            setReceiverName(value);\r\n        }, 500);\r\n    }\r\n\r\n    const onInputKeyup = (e) => {\r\n        const value = e.target.value;\r\n        solveSelectedUsers(e, inputVal, value);\r\n    }\r\n\r\n    const onInputBlur = (e) => {\r\n        const value = e.target.value;\r\n        solveSelectedUsers(e, inputVal, value);\r\n    }\r\n\r\n    // render\r\n    return (\r\n        <Box className=\"receiver-wrapper\">\r\n            <Typography className=\"receiver-label\" >To: </Typography>\r\n            <Box className=\"receiver-container\" display=\"inline-block\" >\r\n                <SelectedUsers items={receivers} onCloseClick={onRemoveSelectedUser}></SelectedUsers>\r\n                <Box className=\"receiver-input-container\">\r\n                    {/* input */}\r\n                    <TextField placeholder=\"Receiver\" ref={inputRef} className=\"receiver-input\" autoFocus={true} onKeyUp={onInputKeyup} onChange={onInputChange} onBlur={onInputBlur} value={inputVal} />\r\n                    {/* LIST */}\r\n                    {(suggestionUsers.length > 0) ? (\r\n                        <SuggestionUsers items={suggestionUsers} onItemClick={onSuggestionUserClick}></SuggestionUsers>\r\n                    ) : null}\r\n                    {/* END LIST */}\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}","import { Avatar, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './SuggestionUsers.css'\r\n\r\nexport default function SuggestionUsers({ items = [], onItemClick }) {\r\n\r\n    function generateSuggestionUsers(items) {\r\n        return items.map((item) => {\r\n            return (\r\n                <ListItem button key={item._id} onClick={() => { onItemClick(item) }}>\r\n                    <ListItemAvatar>\r\n                        <Avatar src={item.picture}> </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        primary={item.username}\r\n                        secondary={false ? 'Secondary text' : null}\r\n                    />\r\n                </ListItem>\r\n            )\r\n        })\r\n    }\r\n    return (\r\n        <List className=\"suggestion-receiver-list\" dense={false} >\r\n            {generateSuggestionUsers(items)}\r\n        </List>\r\n    )\r\n}\r\n","import { Box, Paper, Typography } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { resetNewChat, setNewChatEnabled } from '../../features/NewChat/NewChatSlice';\r\nimport NormalChat from '../NormalChat/NormalChat';\r\nimport Receiver from '../Receiver/Receiver';\r\n\r\nexport default function NewChat() {\r\n    const [friendId, setFriendId] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const onFriendIdSelected = (id) => {\r\n        setFriendId(id);\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(setNewChatEnabled(true));\r\n        return () => {\r\n            dispatch(resetNewChat());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Box position=\"relative\">\r\n            {/* INPUT */}\r\n            <Paper style={{ position: 'absolute', zIndex: '1000', width: '100%', boxShadow: 'none' }}>\r\n                <Receiver onFriendIdSelected={onFriendIdSelected}></Receiver>\r\n            </Paper>\r\n\r\n            {/* CHAT AREA */}\r\n            <Box>\r\n                <NormalChat friendId={friendId} type=\"temp\"></NormalChat>\r\n            </Box>\r\n        </Box >\r\n    )\r\n}\r\n","import { Box, Divider } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { conversationStatus } from '../../features/chat/ChatSlice';\r\nimport NewChat from '../NewChat/NewChat';\r\nimport NormalChat from '../NormalChat/NormalChat';\r\nimport SendMessageBar from '../SendMessageBar/SendMessageBar';\r\nimport UserTyping from '../UserTyping/UserTyping';\r\n\r\n\r\nexport default function ChatBox({ children }) {\r\n    const [loaded] = useState(true);\r\n    const params = useParams();\r\n    const history = useHistory();\r\n    const [display, setDisplay] = useState(null);\r\n    const convoStatus = useSelector(conversationStatus);\r\n\r\n    useEffect(() => {\r\n        const { type, conversationId } = params;\r\n        if (type) {\r\n            switch (type) {\r\n                case 't':\r\n                    if (!conversationId) history.replace('/chat');\r\n                    setDisplay('chat');\r\n                    break;\r\n                case 'new':\r\n                    if (conversationId) history.replace('/chat/new');\r\n                    setDisplay('new');\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            //home chat\r\n            setDisplay('chat');\r\n\r\n        }\r\n        return () => {\r\n        }\r\n    }, [params])\r\n\r\n    const mainHtml = (\r\n        <Box className=\"chat-box-wrapper\">\r\n            {\r\n                display === 'chat'\r\n                    ?\r\n                    <NormalChat></NormalChat>\r\n                    : <NewChat></NewChat>\r\n            }\r\n            <div style={{ position: 'absolute', bottom: '100px', left: '5px', width: '100%' }}>\r\n                <UserTyping></UserTyping>\r\n            </div>\r\n            <Box display={convoStatus === 'loading' ? 'none' : 'unset'}>\r\n                <SendMessageBar></SendMessageBar>\r\n            </Box>\r\n        </Box>\r\n    )\r\n\r\n    return (\r\n        <React.Fragment> { loaded ? mainHtml : children} </React.Fragment>\r\n    )\r\n}\r\n","import { Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport default function AppTitle({ title }) {\r\n    return (\r\n        <Typography variant=\"h5\">{title}</Typography>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport MyAvatar from '../MyAvatar/MyAvatar';\r\nimport Socket from '../../defines/Socket';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport { Box, Hidden, Typography } from '@material-ui/core';\r\nimport SocketEventName from '../../defines/Socket/SocketEventName';\r\nimport AppTitle from '../AppTitle/AppTitle';\r\nimport { conversationId, fetchConversationByUserIdsOrCreateIfNotExist, conversationMemberIds } from '../../features/chat/ChatSlice';\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Helper from '../../defines/Helper';\r\nimport ConversationLink from '../ConversationLink/ConversationLink';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nexport default function OnlineUsers({ item }) {\r\n    const classes = useStyles();\r\n    const [onlineUsers, setOnlineUsers] = useState([]);\r\n    const [isShow, setShow] = useState(false);\r\n    const user = useSelector(authUser) || {};\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setShow(true);\r\n        }, 500);\r\n        MySocket.emitGetOnlineUsers();\r\n        MySocket.onOnlineUsers((data) => {\r\n            setOnlineUsers(data)\r\n        })\r\n        return () => {\r\n            Socket.off(SocketEventName.onlineUsers);\r\n        }\r\n    }, [])\r\n\r\n    const onlineUsersHtml = onlineUsers.filter((item) => {\r\n        return (item.username !== user.username)\r\n    }).map((item) => {\r\n        return (\r\n            <ConversationLink key={item._id} button component={ListItem} item={item}>\r\n                <ListItemAvatar >\r\n                    <MyAvatar online={true} name={item.name} single={item.single} picture={item.picture}></MyAvatar>\r\n                </ListItemAvatar>\r\n                <Hidden smDown>\r\n                    <ListItemText\r\n                        primary={item.username}\r\n                    />\r\n                </Hidden>\r\n            </ConversationLink>\r\n        )\r\n    })\r\n\r\n    const emptyHtml = (\r\n        <Typography className=\"text-muted\" align=\"center\" >No online users</Typography>\r\n    )\r\n\r\n    return (\r\n        <Box className=\"online-users-wrapper\">\r\n            <Box p={2} className=\"title\">\r\n                <AppTitle title=\"Online\"></AppTitle>\r\n            </Box>\r\n            <List className={`${classes.root} online-users-list`}>\r\n                {\r\n                    isShow\r\n                        ? (onlineUsersHtml.length > 0 ? onlineUsersHtml : emptyHtml)\r\n                        : null\r\n                }\r\n            </List >\r\n        </Box>\r\n    );\r\n}","import React, { useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { useEffect } from 'react'\r\nimport Slt from '../../defines/Slt'\r\nimport ConversationList from '../../components/ConversationList/ConversationList'\r\nimport ChatBox from '../../components/ChatBox/ChatBox'\r\nimport OnlineUsers from '../../components/OnlineUser/OnlineUsers'\r\nimport useStyles from '../../defines/styles/MainStyles'\r\nimport { Box, Hidden } from '@material-ui/core'\r\n\r\nexport default function Chat() {\r\n    const classes = useStyles();\r\n    const [appBarHeight,\r\n        setAppBarHeight] = useState(0);\r\n\r\n    // HANDLE HEIGHT\r\n    const heightStyle = {\r\n        height: `calc(100vh - ${appBarHeight}px)`\r\n    }\r\n\r\n    const handleAppBarResize = () => {\r\n        let height = document\r\n            .getElementById(Slt.mainAppBar)\r\n            .clientHeight;\r\n        setAppBarHeight(height);\r\n    }\r\n\r\n    // HANDLE APP BAR RESIZE\r\n    useEffect(() => {\r\n        //handleAppBarResize();\r\n        //window.addEventListener('resize', handleAppBarResize)\r\n    }, []);\r\n\r\n    // DISPLAY LATEST CONVERSATION\r\n\r\n    return (\r\n        <Box className=\"main-content\" p={2} >\r\n            <Grid style={{ height: '100%' }} container >\r\n                <Grid style={{ height: '100%', padding: 0 }} item xs={3} className={`${classes.borderRight500}`} >\r\n                    <ConversationList></ConversationList>\r\n                </Grid>\r\n                <Grid style={{ height: '100%' }} item xs={9} md={7}>\r\n                    <ChatBox>\r\n                        Loading...\r\n                    </ChatBox>\r\n                </Grid>\r\n                <Hidden smDown stle>\r\n                    <Grid style={{ height: '100%', padding: 0 }} item xs={false} md={2} className={`${classes.borderLeft500} `}>\r\n                        <OnlineUsers />\r\n                    </Grid>\r\n                </Hidden>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n","const FormErrors = {\r\n    required: '{0} required',\r\n    lengthGreater: '{0} must greater than {1} characters',\r\n    noSpecialCharacter: '{0} must not contain special characters',\r\n    unique: '{0} must be unique',\r\n    match: '{0} must match',\r\n}\r\nexport default FormErrors;","import React, { useState, } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setNotify } from '../../features/notify/NotifySlice';\r\nimport { isLogged, loginThunk, status, authError } from '../../features/auth/authSlice';\r\nimport { useCookies } from 'react-cookie';\r\nimport Helper from '../../defines/Helper'\r\nimport { LOGGED_USER } from '../../defines/CookieName';\r\nimport Message from '../../defines/Message';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { Box } from '@material-ui/core';\r\nimport FormErrors from '../../defines/configs/FormErrors';\r\nimport RouterLink from '../RouterLink/RouterLink';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    }\r\n}));\r\n\r\nexport default function SignIn() {\r\n    const dispatch = useDispatch();\r\n    const [isSubmitClicked, setSubmitClicked] = useState(false);\r\n\r\n    // SELECTOR\r\n    const logged = useSelector(isLogged);\r\n    const [cookies, setCookie] = useCookies([LOGGED_USER]);\r\n\r\n    const authStatus = useSelector(status);\r\n    const authErr = useSelector(authError);\r\n\r\n    const classes = useStyles();\r\n    if (isSubmitClicked) {\r\n        if (authStatus === 'succeeded' && authErr)\r\n            dispatch(setNotify({ message: 'Login unsuccessfully', type: 'error', open: true }))\r\n    } else {\r\n        if (authStatus === 'loading') return null;\r\n    }\r\n\r\n    const mainHtml = (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                    </Typography>\r\n\r\n                {/* FORMIK */}\r\n                <Formik\r\n                    initialValues={{\r\n                        username: '',\r\n                        password: '',\r\n                        passwordConfirmation: ''\r\n                    }}\r\n                    validationSchema={yup.object({\r\n                        username: yup.string().required(Helper.format(FormErrors.required, 'Username')),\r\n                        password: yup.string().required(Helper.format(FormErrors.required, 'Password')),\r\n                    })}\r\n                    onSubmit={async (values, { setSubmitting }) => {\r\n                        const { username, password } = values;\r\n                        let user = {\r\n                            username,\r\n                            password\r\n                        };\r\n                        setSubmitClicked(true);\r\n                        dispatch(loginThunk(user));\r\n                        setCookie(LOGGED_USER, user);\r\n                        //alert(JSON.stringify(values));\r\n                    }}>\r\n                    {({\r\n                        values,\r\n                        errors,\r\n                        touched,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                        isSubmitting,\r\n                        isValid,\r\n                        dirty,\r\n                        /* and other goodies */\r\n                    }) => {\r\n                        const showErrors = {};\r\n                        for (let key in errors) {\r\n                            showErrors[key] = (errors[key] != null) && touched[key];\r\n                        }\r\n                        const props = (field, label) => {\r\n                            label = label || Helper.ucFirst(field);\r\n                            return {\r\n                                fullWidth: true,\r\n                                margin: 'normal',\r\n                                placeholder: label,\r\n                                variant: 'outlined',\r\n                                name: field,\r\n                                onChange: handleChange,\r\n                                onBlur: handleBlur,\r\n                                value: values[label],\r\n                                label: label,\r\n                                error: (showErrors[field]),\r\n                                helperText: (showErrors[field])\r\n                                    ? errors[field]\r\n                                    : null\r\n                            }\r\n                        }\r\n                        return (\r\n                            <form onSubmit={handleSubmit} noValidate autoComplete=\"off\">\r\n                                <TextField autoFocus={true} type=\"text\" {...props('username')} />\r\n                                <TextField type=\"password\" {...props('password')} />\r\n                                <Box >\r\n                                    <Button\r\n                                        disabled={isSubmitting || !isValid || !dirty}\r\n                                        type=\"submit\"\r\n                                        fullWidth\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                    > Sign In\r\n                                    </Button>\r\n                                </Box>\r\n                                <RouterLink to=\"/sign-up\" >\r\n                                    <Typography color=\"primary\" style={{ cursor: 'pointer' }} >\r\n                                        Create an account\r\n                                    </Typography>\r\n                                </RouterLink>\r\n                            </form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n                {/* END FORMIK */}\r\n\r\n            </div>\r\n        </Container>\r\n    )\r\n\r\n    return (!logged ? mainHtml : (null));\r\n}\r\n","import * as yup from 'yup';\r\nimport FormErrors from '../configs/FormErrors';\r\nimport Helper from '../Helper';\r\nimport UserApi from '../https/UserApi';\r\n\r\nconst isUsernameExist = async username => {\r\n    if (username) {\r\n        const data = await UserApi.findByUsername(username);\r\n        return (data.status === 'succeeded');\r\n    }\r\n    return false;\r\n}\r\n\r\n// length\r\nconst isLengthValid = (value, length) => {\r\n    if (value) {\r\n        return (value.length >= length)\r\n    }\r\n    return false;\r\n}\r\n\r\n// contain special characters\r\nconst noSpecialCharacters = (value) => {\r\n    if (value) {\r\n        return (/^[a-zA-Z0-9]+$/.test(value));\r\n    }\r\n    return false;\r\n}\r\n\r\nconst UserValidates = {\r\n    username: function (username, setUsername, timeoutObj) {\r\n        const label = 'Username';\r\n        return yup\r\n            .string()\r\n            .required(Helper.format(FormErrors.required, label))\r\n            .test('length', Helper.format(FormErrors.lengthGreater, label, 4), (value, context) => {\r\n                return (isLengthValid(value, 4));\r\n            })\r\n            .test('specialCharacter', Helper.format(FormErrors.noSpecialCharacter, label), (value, context) => {\r\n                return (noSpecialCharacters(value));\r\n            })\r\n            .test('usernameExist', Helper.format(FormErrors.unique, label), async (value, context) => {\r\n                if (isLengthValid(value, 4) && noSpecialCharacters(value)) {\r\n                    if (value !== username.value) {\r\n                        clearTimeout(timeoutObj);\r\n                        if (!value) return true;\r\n                        return new Promise((resolve, reject) => {\r\n                            timeoutObj = setTimeout(async () => {\r\n                                const isExist = await isUsernameExist(value);\r\n                                setUsername({ value, unique: !isExist });\r\n                                resolve(!isExist);\r\n                            }, 500);\r\n                        });\r\n                    }\r\n                }\r\n                return username.unique;\r\n            });\r\n\r\n    },\r\n    password: function () {\r\n        const label = 'Password';\r\n        return yup\r\n            .string()\r\n            .required(Helper.format(FormErrors.required, label))\r\n            .matches(/[a-zA-Z0-9]{3,}/, Helper.format(FormErrors.lengthGreater, label));\r\n    },\r\n    passwordConfirmation: function () {\r\n        const label = 'Password confirmation';\r\n        return yup\r\n            .string()\r\n            .required(Helper.format(FormErrors.required, label))\r\n            .oneOf([yup.ref('password')], Helper.format(FormErrors.match, label));\r\n    }\r\n}\r\n\r\nexport default UserValidates;\r\n","import React, { useState, } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setNotify } from '../../features/notify/NotifySlice';\r\nimport { isLogged, login, status } from '../../features/auth/authSlice';\r\nimport Helper from '../../defines/Helper'\r\nimport { Formik } from 'formik';\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport * as yup from 'yup';\r\nimport UserValidates from '../../defines/validates/UserValidates';\r\nimport Message from '../../defines/Message';\r\nimport { Box } from '@material-ui/core';\r\nimport RouterLink from '../RouterLink/RouterLink';\r\n\r\nlet timeoutObj;\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1)\r\n    },\r\n}));\r\n\r\nexport default function SignUp() {\r\n    const dispatch = useDispatch();\r\n    const [username, setUsername] = useState({ value: '', unique: false });\r\n\r\n    // SELECTOR\r\n    const logged = useSelector(isLogged);\r\n    const authStatus = useSelector(status);\r\n    const classes = useStyles();\r\n\r\n    if (authStatus === 'loading')\r\n        return null;\r\n\r\n    return (!logged\r\n        ? (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">Sign Up</Typography>\r\n                    <Formik\r\n                        initialValues={{\r\n                            username: '',\r\n                            password: '',\r\n                            passwordConfirmation: ''\r\n                        }}\r\n                        validationSchema={yup.object({\r\n                            username: UserValidates.username(username, setUsername, timeoutObj),\r\n                            password: UserValidates.password(),\r\n                            passwordConfirmation: UserValidates.passwordConfirmation(),\r\n                        })}\r\n                        onSubmit={async (values, { setSubmitting }) => {\r\n                            const { username, password } = values;\r\n                            let data = await UserApi.createAccount(username, password);\r\n                            if (data.status === 'succeeded') {\r\n                                const user = data.payload;\r\n                                dispatch(setNotify({ message: Helper.format(Message.welcomeNewAccount, user.username) }));\r\n                                dispatch(login(user));\r\n                            } else {\r\n                                setSubmitting(false);\r\n                            }\r\n                        }}>\r\n                        {({\r\n                            values,\r\n                            errors,\r\n                            touched,\r\n                            handleChange,\r\n                            handleBlur,\r\n                            handleSubmit,\r\n                            isSubmitting,\r\n                            isValid,\r\n                            dirty\r\n                            /* and other goodies */\r\n                        }) => {\r\n                            const showErrors = {};\r\n                            for (let key in errors) {\r\n                                showErrors[key] = (errors[key] != null) && touched[key];\r\n                            }\r\n                            const props = (field, label) => {\r\n                                label = label || Helper.ucFirst(field);\r\n                                return {\r\n                                    fullWidth: true,\r\n                                    margin: 'normal',\r\n                                    placeholder: label,\r\n                                    variant: 'outlined',\r\n                                    name: field,\r\n                                    onChange: handleChange,\r\n                                    onBlur: handleBlur,\r\n                                    value: values[label],\r\n                                    label: label,\r\n                                    error: (showErrors[field]),\r\n                                    helperText: (showErrors[field])\r\n                                        ? errors[field]\r\n                                        : null\r\n                                }\r\n                            }\r\n                            return (\r\n                                <form onSubmit={handleSubmit} noValidate autoComplete=\"off\">\r\n                                    <TextField type=\"text\" {...props('username')} />\r\n                                    <TextField type=\"password\" {...props('password')} />\r\n                                    <TextField type=\"password\" {...props('passwordConfirmation', 'Password confirmation')} />\r\n                                    <Box >\r\n                                        <Button\r\n                                            disabled={isSubmitting || !isValid || !dirty}\r\n                                            type=\"submit\"\r\n                                            fullWidth\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                        > Sign Up </Button>\r\n                                    </Box>\r\n                                    <RouterLink to=\"/signin\">\r\n                                        <Typography color=\"primary\" style={{ cursor: 'pointer' }}>\r\n                                            Have an account?\r\n                                        </Typography>\r\n                                    </RouterLink>\r\n                                </form>\r\n                            )\r\n                        }}\r\n                    </Formik>\r\n                </div>\r\n            </Container >\r\n        )\r\n        : (null));\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { type, message, open, setNotify, timeout } from './NotifySlice';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2)\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function Notify() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const isOpen = useSelector(open);\r\n    const msg = useSelector(message);\r\n    const msgType = useSelector(type);\r\n    const duration = useSelector(timeout);\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setNotify({ open: false }));\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {(msg)\r\n                ? (\r\n\r\n                    <Snackbar\r\n                        open={isOpen}\r\n                        autoHideDuration={duration}\r\n                        onClose={handleClose}\r\n                        anchorOrigin={{\r\n                            horizontal: 'right',\r\n                            vertical: 'top'\r\n                        }}\r\n                        message={msg}>\r\n                        {(msgType !== '')\r\n                            ? (\r\n\r\n                                <Alert onClose={handleClose} severity={msgType}>\r\n                                    {msg}\r\n                                </Alert>\r\n                            )\r\n                            : null\r\n                        }\r\n                    </Snackbar>\r\n                )\r\n                : ''}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n    Route,\r\n    Redirect,\r\n} from \"react-router-dom\";\r\nimport { isLogged } from \"../../features/auth/authSlice\";\r\n\r\nexport default function PrivateRoute({ children, ...rest }) {\r\n    const logged = useSelector(isLogged);\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) => {\r\n                return logged ? (\r\n                    children\r\n                ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n            }\r\n            }\r\n        />\r\n    );\r\n}","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit'\r\nimport UserApi from '../../defines/https/UserApi';\r\n\r\n// THUNKS\r\nexport const fetchFriendsByIds = createAsyncThunk('friend/fetchFriends', async ({ type, ids }) => {\r\n    const response = await UserApi.findUsersByIds(ids);\r\n    return { type, response };\r\n})\r\n\r\nexport const fetchStrangersByUsername = createAsyncThunk('friend/fetchFriends', async ({ username }) => {\r\n    const response = await UserApi.findStrangerByUsername(username);\r\n    return { type: 'stranger', response };\r\n})\r\n\r\n// ENTITY ADAPTER\r\nconst adapter = createEntityAdapter({\r\n    selectId: item => item._id,\r\n})\r\n\r\n// INITIAL STATE\r\nconst itemsInitialState = adapter.getInitialState({\r\n    status: 'idle',\r\n    error: null\r\n})\r\n\r\nconst initialState = {\r\n    friend: itemsInitialState,\r\n    request: itemsInitialState,\r\n    sent_request: itemsInitialState,\r\n    stranger: itemsInitialState,\r\n}\r\n\r\n// SLICE\r\nconst FriendSlice = createSlice({\r\n    name: 'friend',\r\n    initialState,\r\n    reducers: {\r\n        // current user\r\n        onAddFriend: (state, action) => {\r\n            const { user } = action.payload;\r\n            adapter.removeOne(state.stranger, user._id);\r\n            adapter.addOne(state.sent_request, user);\r\n        },\r\n        onUnFriend: (state, action) => {\r\n            const { user } = action.payload;\r\n            adapter.removeOne(state.friend, user._id);\r\n            adapter.addOne(state.stranger, user);\r\n        },\r\n        onCancelFriendRequest: (state, action) => {\r\n            const { user } = action.payload;\r\n            adapter.removeOne(state.sent_request, user._id);\r\n            adapter.addOne(state.stranger, user);\r\n        },\r\n        onRejectFriendRequest: (state, action) => {\r\n            const { user } = action.payload;\r\n            adapter.removeOne(state.request, user._id);\r\n            adapter.addOne(state.stranger, user);\r\n        },\r\n        onAcceptFriendRequest: (state, action) => {\r\n            const { user } = action.payload;\r\n            adapter.removeOne(state.request, user._id);\r\n            adapter.addOne(state.friend, user);\r\n        },\r\n\r\n        // friend\r\n        onFriendRequested: (state, action) => {\r\n            const { user } = action.payload;\r\n            adapter.removeOne(state.stranger, user._id);\r\n            adapter.addOne(state.request, user);\r\n        },\r\n        onFriendAccepted: (state, action) => {\r\n            const { user } = action.payload;\r\n            adapter.removeOne(state.sent_request, user._id);\r\n            adapter.addOne(state.friend, user);\r\n        },\r\n        onFriendUnfriend: (state, action) => {\r\n            const { user } = action.payload;\r\n            adapter.removeOne(state.friend, user._id);\r\n            adapter.addOne(state.stranger, user);\r\n        },\r\n        onFriendCanceled: (state, action) => {\r\n            const { user } = action.payload;\r\n            adapter.removeOne(state.request, user._id);\r\n            adapter.addOne(state.stranger, user);\r\n        },\r\n        onFriendRejected: (state, action) => {\r\n            const { user } = action.payload;\r\n            adapter.removeOne(state.sent_request, user._id);\r\n            adapter.addOne(state.stranger, user);\r\n        },\r\n    },\r\n    extraReducers: {\r\n        // fetch friends\r\n        [fetchFriendsByIds.pending]: (state, action) => {\r\n            const { type } = action.meta.arg;\r\n            const currentState = state[type];\r\n            currentState.status = 'loading'\r\n        },\r\n        [fetchFriendsByIds.fulfilled]: (state, action) => {\r\n            const { type, response } = action.payload;\r\n            const { payload, status } = response;\r\n            const currentState = state[type];\r\n            if (status === 'succeeded') {\r\n                adapter.upsertMany(currentState, payload)\r\n                currentState.error = null;\r\n            } else currentState.error = 'not found';\r\n            currentState.status = 'succeeded'\r\n        },\r\n        [fetchFriendsByIds.rejected]: (state, action) => {\r\n            console.log(action.error.message);\r\n        }\r\n    }\r\n});\r\n\r\n// SELECTORS\r\nconst selectors = {\r\n    friendStatus: (state, type) => {\r\n        return state.friend[type].status;\r\n    },\r\n    friendError: (state, type) => {\r\n        return state.friend[type].error;\r\n    }\r\n}\r\n\r\nexport const { friendStatus } = selectors;\r\n\r\nexport const {\r\n    selectAll: selectAllFriend,\r\n    selectById: selectFriendById,\r\n    selectIds: selectFriendIds\r\n    // Pass in a selector that returns the posts slice of state\r\n} = adapter.getSelectors(state => state.friend.friend)\r\n\r\nexport const {\r\n    selectAll: selectAllRequest,\r\n    selectById: selectRequestById,\r\n    selectIds: selectRequestIds\r\n    // Pass in a selector that returns the posts slice of state\r\n} = adapter.getSelectors(state => state.friend.request)\r\n\r\nexport const {\r\n    selectAll: selectAllSentRequest,\r\n    selectById: selectSentRequestById,\r\n    selectIds: selectSentRequestIds\r\n    // Pass in a selector that returns the posts slice of state\r\n} = adapter.getSelectors(state => state.friend.sent_request)\r\n\r\nexport const {\r\n    selectAll: selectAllStranger,\r\n    selectById: selectStrangerById,\r\n    selectIds: selectStrangerIds\r\n    // Pass in a selector that returns the posts slice of state\r\n} = adapter.getSelectors(state => state.friend.stranger)\r\n\r\nexport const {\r\n    onFriendRequested,\r\n    onFriendAccepted,\r\n    onFriendCanceled,\r\n    onFriendRejected,\r\n    onFriendUnfriend,\r\n    onAcceptFriendRequest,\r\n    onAddFriend,\r\n    onCancelFriendRequest,\r\n    onRejectFriendRequest,\r\n    onUnFriend\r\n} = FriendSlice.actions\r\nexport default FriendSlice.reducer","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport mainStyles from '../../defines/styles/MainStyles'\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport { onCancelFriendRequest } from '../../features/friend/FriendSlice';\r\n\r\nexport default function SentRequestAction({ item }) {\r\n    const dispatch = useDispatch();\r\n    const classes = mainStyles();\r\n    const user = useSelector(authUser);\r\n    const onCancelClick = async () => {\r\n        const data = await UserApi.cancelFriendRequest(user._id, item._id);\r\n        if (data.status === 'succeeded') {\r\n            MySocket.emitCancelFriendRequest(user, item._id);\r\n            dispatch(onCancelFriendRequest({ user: item }));\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onCancelClick} variant=\"contained\" size=\"small\" className={classes.buttonStyle}>Cancel request</Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport Message from '../../defines/Message';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport mainStyles from '../../defines/styles/MainStyles'\r\nimport { authUser, updateUser } from '../../features/auth/authSlice';\r\nimport { onAcceptFriendRequest, onRejectFriendRequest } from '../../features/friend/FriendSlice';\r\n\r\nexport default function SentRequestAction({ item }) {\r\n    const dispatch = useDispatch();\r\n    const classes = mainStyles();\r\n    const user = useSelector(authUser);\r\n    const onConfirmClick = async () => {\r\n        const data = await UserApi.confirmFriendRequest(user._id, item._id);\r\n        if (data.status === 'succeeded') {\r\n            MySocket.emitAcceptFriend(user, item._id);\r\n            dispatch(onAcceptFriendRequest({ user: item }));\r\n        }\r\n    }\r\n\r\n    const onDeleteClick = async () => {\r\n        const data = await UserApi.deleteFriendRequest(user._id, item._id);\r\n        if (data.status === 'succeeded') {\r\n            MySocket.emitDeleteFriendRequest(user, item._id);\r\n            dispatch(onRejectFriendRequest({ user: item }));\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onConfirmClick} color=\"primary\" variant=\"contained\" size=\"small\" className={classes.buttonStyle}>Confirm</Button>\r\n            <Button onClick={onDeleteClick} variant=\"contained\" size=\"small\" className={classes.buttonStyle}>Delete</Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport Message from '../../defines/Message';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport mainStyles from '../../defines/styles/MainStyles'\r\nimport { authUser, updateUser } from '../../features/auth/authSlice';\r\nimport { onAddFriend } from '../../features/friend/FriendSlice';\r\n\r\nexport default function SentRequestAction({ item }) {\r\n    const classes = mainStyles();\r\n    const user = useSelector(authUser);\r\n    const dispatch = useDispatch();\r\n    const onAddFriendClick = async () => {\r\n        const data = await UserApi.sentFriendRequest(user._id, item._id);\r\n        if (data.status === 'succeeded') {\r\n            //MySocket.emitUpdateUserById(user._id);\r\n            MySocket.emitAddFriend(user, item._id);\r\n            dispatch(onAddFriend({user: item}));\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onAddFriendClick} color=\"primary\" variant=\"contained\" size=\"small\" className={classes.buttonStyle}>Add friend</Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { Button } from '@material-ui/core';\r\nimport mainStyles from '../../defines/styles/MainStyles'\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport ConversationLink from '../ConversationLink/ConversationLink';\r\nimport { onUnFriend } from '../../features/friend/FriendSlice';\r\n\r\nconst ITEM_HEIGHT = 48;\r\n\r\nexport default function SentRequestAction({ item }) {\r\n\r\n    const dispatch = useDispatch();\r\n    const user = useSelector(authUser);\r\n    const classes = mainStyles();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    // click\r\n    const onUnfriendClick = async () => {\r\n        const data = await UserApi.unfriend(user._id, item._id);\r\n        if (data.status === 'succeeded') {\r\n            MySocket.emitUnfriend(user, item._id);\r\n            dispatch(onUnFriend({ user: item }));\r\n        }\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const onChat = () => {\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton\r\n                aria-label=\"more\"\r\n                aria-controls=\"long-menu\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n            >\r\n                <MoreVertIcon />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"long-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={open}\r\n                onClose={handleClose}\r\n                PaperProps={{\r\n                    style: {\r\n                        maxHeight: ITEM_HEIGHT * 4.5,\r\n                        width: '20ch',\r\n                    },\r\n                }}\r\n            >\r\n                <MenuItem>\r\n                    <ConversationLink item={item} style={{ width: '100%' }}>\r\n                        <Button onClick={onChat} variant=\"contained\" size=\"small\" fullWidth color=\"primary\" className={classes.buttonStyle}>Chat</Button>\r\n                    </ConversationLink>\r\n                </MenuItem>\r\n                <MenuItem><Button onClick={onUnfriendClick} variant=\"contained\" size=\"small\" fullWidth className={classes.buttonStyle}>Unfriend</Button></MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n","import {\r\n    Card,\r\n    CardActions,\r\n    CardHeader,\r\n    Grid,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport React from 'react'\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport MyAvatar from '../MyAvatar/MyAvatar'\r\nimport SentRequestAction from '../FriendAction/SentRequestAction';\r\nimport RequestAction from '../FriendAction/RequestAction';\r\nimport StrangerAction from '../FriendAction/StrangerAction';\r\nimport FriendAction from '../FriendAction/FriendAction';\r\nimport { useSelector } from 'react-redux';\r\nimport Loading from '../Loading/Loading';\r\nconst getType = (user, friendId) => {\r\n    let { friend, request, sent_request } = user.friend;\r\n\r\n    let type;\r\n    if (friend.indexOf(friendId) > -1) {\r\n        type = 'friend';\r\n    } else if (request.indexOf(friendId) > -1) {\r\n        type = 'request';\r\n    } else if (sent_request.indexOf(friendId) > -1) {\r\n        type = 'sent_request';\r\n    } else type = 'stranger';\r\n\r\n    return type\r\n}\r\n\r\nexport default function FriendList({ items, type, isLoading }) {\r\n    const user = useSelector(authUser);\r\n    const itemsHtml = items.map((item, index) => {\r\n        let localType = type;\r\n        let action;\r\n        localType = type || getType(user, item._id);\r\n        if (localType === 'friend') {\r\n            action = <FriendAction item={item}></FriendAction>\r\n        } else if (localType === 'sent_request') {\r\n            action = <SentRequestAction item={item}></SentRequestAction>\r\n        } else if (localType === 'request') {\r\n            action = <RequestAction item={item}></RequestAction>\r\n        } else {\r\n            action = <StrangerAction item={item}></StrangerAction>\r\n        }\r\n        const actions = (\r\n            <CardActions style={{ justifyContent: 'flex-end' }}> {action} </CardActions>\r\n        )\r\n        return (\r\n            <Grid key={index} item xs={12} md={6} lg={4} >\r\n                <Card >\r\n                    <CardHeader\r\n                        avatar={< MyAvatar name={\r\n                            item.username\r\n                        }\r\n                            picture={\r\n                                item.picture\r\n                            } > </MyAvatar>}\r\n                        action={actions}\r\n                        title={item.username}\r\n                        subheader={null} />\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    const message = (\r\n        <React.Fragment>\r\n            <Grid item xs={12}>\r\n                {isLoading\r\n                    ? <Loading></Loading>\r\n                    : <Typography align=\"center\" className=\"text-muted\">Your list is empty</Typography>\r\n                }\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n    return (\r\n        <React.Fragment>{itemsHtml.length > 0 ? itemsHtml : message}</React.Fragment>\r\n    );\r\n}","import {\r\n    Card,\r\n    CardHeader,\r\n    Grid,\r\n    IconButton,\r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport { isLogged, authUser } from '../../features/auth/authSlice';\r\nimport MyAvatar from '../MyAvatar/MyAvatar'\r\nimport FriendList from '../FriendList/FriendList';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchFriendsByIds, selectAllStranger, fetchStrangersByUsername, friendStatus, selectAllFriend, selectAllRequest, selectAllSentRequest } from '../../features/friend/FriendSlice';\r\n\r\nconst AllFriendList = () => {\r\n    const type = 'friend';\r\n    const items = useSelector(selectAllFriend);\r\n\r\n    const user = useSelector(authUser);\r\n    const status = useSelector((state) => friendStatus(state, type));\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (status === 'idle') {\r\n            dispatch(fetchFriendsByIds({ type, ids: user.friend[type] }));\r\n        }\r\n    }, [status, user.friend[type]])\r\n\r\n    return (\r\n        <FriendList items={items} type={type} isLoading={status === 'loading'}></FriendList>\r\n    );\r\n}\r\n\r\nconst SentRequestList = () => {\r\n    const type = 'sent_request';\r\n    const items = useSelector(selectAllSentRequest);\r\n\r\n    const user = useSelector(authUser);\r\n    const status = useSelector((state) => friendStatus(state, type));\r\n    const dispatch = useDispatch();\r\n\r\n    // FETCH\r\n    useEffect(() => {\r\n        if (status === 'idle') {\r\n            dispatch(fetchFriendsByIds({ type, ids: user.friend[type] }));\r\n        }\r\n    }, [status, user.friend[type]])\r\n\r\n    return (\r\n        <FriendList items={items} type={type} isLoading={status === 'loading'}></FriendList>\r\n    )\r\n}\r\n\r\nconst RequestList = () => {\r\n    const type = 'request';\r\n    const items = useSelector(selectAllRequest);\r\n\r\n    const user = useSelector(authUser);\r\n    const status = useSelector((state) => friendStatus(state, type));\r\n    const dispatch = useDispatch();\r\n\r\n    // FETCH\r\n    useEffect(() => {\r\n        if (status === 'idle') {\r\n            dispatch(fetchFriendsByIds({ type, ids: user.friend[type] }));\r\n        }\r\n    }, [status, user.friend[type]])\r\n\r\n    return (\r\n        <FriendList items={items} type={type} isLoading={status === 'loading'}></FriendList>\r\n    )\r\n}\r\n\r\nconst PeopleMayKnowList = ({ username }) => {\r\n    const type = 'stranger';\r\n    const items = useSelector(selectAllStranger);\r\n\r\n    const user = useSelector(authUser);\r\n    const status = useSelector((state) => friendStatus(state, type));\r\n    const dispatch = useDispatch();\r\n\r\n    // FETCH\r\n    useEffect(() => {\r\n        if (status === 'idle') {\r\n            dispatch(fetchStrangersByUsername({ type, username }));\r\n        }\r\n    }, [status, user.username])\r\n\r\n    return (\r\n        <FriendList items={items} type={type} isLoading={status === 'loading'}></FriendList>\r\n    )\r\n}\r\n\r\nexport default function FriendBox({ type }) {\r\n    let itemsHtml = null;\r\n    const logged = useSelector(isLogged);\r\n    const user = useSelector(authUser);\r\n    if (logged) {\r\n        switch (type) {\r\n            case 'friends_request':\r\n                itemsHtml = <RequestList username={user.username}></RequestList>\r\n                break;\r\n            case 'friends_sent_request':\r\n                itemsHtml = <SentRequestList username={user.username}></SentRequestList>\r\n                break;\r\n            case 'people_may_know':\r\n                itemsHtml = <PeopleMayKnowList username={user.username}></PeopleMayKnowList>\r\n                break;\r\n            default:\r\n                itemsHtml = <AllFriendList username={user.username}></AllFriendList>\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid style={{\r\n            paddingTop: '8px',\r\n            maxHeight: '500px',\r\n            overflowY: 'auto',\r\n        }} className=\"custom-scrollbar\" container spacing={2} >{itemsHtml}</Grid>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './Friends.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport AppTitle from '../AppTitle/AppTitle';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport FriendBox from '../FriendBox/FriendBox';\r\nimport OnlineUsers from '../OnlineUser/OnlineUsers';\r\nimport mainStyles from '../../defines/styles/MainStyles';\r\nimport { Box } from '@material-ui/core';\r\n\r\n\r\nfunction a11yProps(index) {\r\n    return { id: `simple-tab-${index}`, 'aria-controls': `simple-tabpanel-${index}` };\r\n}\r\n\r\nconst friendTabs = ['friends_all', 'friends_request', 'friends_sent_request', 'people_may_know'];\r\n\r\nexport default function Friends() {\r\n    const classes = mainStyles();\r\n    const [value,\r\n        setValue] = React.useState(0);\r\n    const history = useHistory();\r\n    const params = useParams();\r\n\r\n    useEffect(() => {\r\n        let tab = params.friendsTab;\r\n        let index = friendTabs.indexOf(tab);\r\n        index = index < 0 ? 0 : index;\r\n        setValue(index);\r\n    }, [params.friendsTab])\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        let tab = friendTabs[newValue];\r\n        history.push(`/${tab}`);\r\n    };\r\n\r\n    return (\r\n        <Box p={2} style={{ height: '100%' }}>\r\n            <Grid style={{ height: '100%' }} container spacing={2}>\r\n                <Grid style={{ height: '100%' }} item xs={9} >\r\n                    <AppTitle title=\"Friends\"></AppTitle>\r\n                    <Box mt={1} >\r\n                        <AppBar position=\"static\" color=\"default\">\r\n                            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" indicatorColor=\"primary\" className=\"my-tabs\" scrollButtons=\"auto\" variant=\"scrollable\">\r\n                                <Tab label=\"All Friends\" {...a11yProps(0)} />\r\n                                <Tab label=\"Friend Requests\" {...a11yProps(1)} />\r\n                                <Tab label=\"Sent Requests\" {...a11yProps(2)} />\r\n                                <Tab label=\"People you may know\" {...a11yProps(3)} />\r\n                            </Tabs>\r\n                        </AppBar>\r\n                        <FriendBox type={friendTabs[value]}></FriendBox>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid style={{ height: '100%' }} item xs={3} ><OnlineUsers /> </Grid>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n    Route,\r\n    useHistory,\r\n    useLocation,\r\n} from \"react-router-dom\";\r\nimport { isLogged } from \"../../features/auth/authSlice\";\r\n\r\nexport default function AuthRoute({ ...rest }) {\r\n    const logged = useSelector(isLogged);\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if (logged) {\r\n            let { from } = location.state || { from: { pathname: \"/\" } };\r\n            history.replace(from);\r\n        }\r\n    }, [logged, location.state, history])\r\n    return (\r\n        <Route {...rest}></Route>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Header from './components/Header/Header'\r\nimport Chat from './features/chat/Chat'\r\nimport { BrowserRouter as Router, Switch, Redirect, HashRouter } from 'react-router-dom'\r\nimport SignIn from './components/SignIn/SignIn'\r\nimport SignUp from './components/SignUp/SignUp'\r\nimport Notify from './features/notify/Notify'\r\nimport PrivateRoute from './components/PrivateRoute/PrivateRoute'\r\nimport { useCookies } from 'react-cookie'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { authUser, loginThunk, updateUser } from './features/auth/authSlice'\r\nimport { conversationId } from './features/chat/ChatSlice'\r\nimport { LOGGED_USER } from './defines/CookieName';\r\nimport { Box, Paper } from '@material-ui/core';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Friends from './components/Friends/Friends';\r\nimport AuthRoute from './components/AuthRoute/AuthRoute';\r\nimport MySocket from './defines/Socket/MySocket';\r\nimport SocketEventName from './defines/Socket/SocketEventName';\r\nimport { setNotify } from './features/notify/NotifySlice';\r\nimport { onFriendUnfriend, onFriendRejected, onFriendCanceled, onFriendAccepted, onFriendRequested } from './features/friend/FriendSlice';\r\nimport Helper from './defines/Helper';\r\nimport Message from './defines/Message';\r\n\r\nfunction useWindowSize() {\r\n    window.addEventListener('scroll', () => {\r\n        window.scrollTo(0, 0);\r\n    })\r\n}\r\n\r\n\r\nexport default function App() {\r\n    //useWindowSize();\r\n    const [cookies] = useCookies([LOGGED_USER]);\r\n    const user = useSelector(authUser) || {};\r\n    const convoId = useSelector(conversationId);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const setupFriendEvents = () => {\r\n            MySocket.onFriendAccepted((data) => {\r\n                dispatch(setNotify({ message: Helper.format(Message.friendAccepted, data.user.username,), type: 'info', open: true }));\r\n                dispatch(onFriendAccepted({ user: data.user }))\r\n            })\r\n            MySocket.onFriendRequested((data) => {\r\n                dispatch(setNotify({ message: Helper.format(Message.friendRequested, data.user.username,), type: 'info', open: true }));\r\n                dispatch(onFriendRequested({ user: data.user }))\r\n            })\r\n            MySocket.onFriendUnFriend((data) => {\r\n                dispatch(onFriendUnfriend({ user: data.user }))\r\n            })\r\n            MySocket.onFriendRequestCanceled((data) => {\r\n                dispatch(onFriendCanceled({ user: data.user }))\r\n            })\r\n            MySocket.onFriendRejected((data) => {\r\n                dispatch(onFriendRejected({ user: data.user }))\r\n            })\r\n        }\r\n        setupFriendEvents();\r\n        MySocket.onUpdateUser((data) => {\r\n            console.log('update user run')\r\n            dispatch(updateUser(data))\r\n        })\r\n\r\n        MySocket.onNewMessageNotification((data) => {\r\n            const { message, conversationId } = data;\r\n            if (conversationId !== convoId && message.from._id !== user._id) {\r\n                dispatch(setNotify({ message: Helper.format(Message.newMessage, message.from.username, message.text), type: 'success', open: true, timeout: 2000 }));\r\n            }\r\n        })\r\n        return () => {\r\n            MySocket.off(SocketEventName.updateUser)\r\n            MySocket.off(SocketEventName.friendAccepted)\r\n            MySocket.off(SocketEventName.friendRequested)\r\n            MySocket.off(SocketEventName.friendUnfriend)\r\n            MySocket.off(SocketEventName.friendRequestCanceled)\r\n            MySocket.off(SocketEventName.friendRejected)\r\n            MySocket.off(SocketEventName.newMessageNotification)\r\n        }\r\n    }, [user._id, convoId])\r\n\r\n    // SIGN IN WITH COOKIE\r\n    useEffect(() => {\r\n        if (cookies[LOGGED_USER])\r\n            dispatch(loginThunk(cookies[LOGGED_USER]))\r\n    }, [])\r\n\r\n    const themeType = useSelector((state) => {\r\n        return state.theme.type\r\n    });\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: themeType\r\n        }\r\n    });\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <HashRouter base=\"/\">\r\n                <Paper >\r\n                    <Box className=\"wrapper\">\r\n                        {/* HEADER */}\r\n                        <Header></Header>\r\n                        <Switch>\r\n                            {/* CONTENT */}\r\n                            <PrivateRoute path=\"/chat/:type(t|new)/:conversationId?\" exact> <Chat></Chat> </PrivateRoute>\r\n                            <PrivateRoute path={`/:friendsTab(friends|friends_all|friends_request|friends_sent_request|people_may_know)`} ><Friends></Friends> </PrivateRoute>\r\n                            <AuthRoute path=\"/login\" exact component={SignIn}></AuthRoute>\r\n                            <AuthRoute path=\"/sign-up\" exact component={SignUp}></AuthRoute>\r\n                            <Redirect to=\"/chat/new\"></Redirect>\r\n                        </Switch>\r\n                        <Notify></Notify>\r\n                    </Box>\r\n                </Paper>\r\n            </HashRouter>\r\n        </ThemeProvider >\r\n    )\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport authSlice from '../features/auth/authSlice'\r\nimport ChatSlice from '../features/chat/ChatSlice'\r\nimport FriendSlice from '../features/friend/FriendSlice'\r\nimport NewChatSlice from '../features/NewChat/NewChatSlice'\r\nimport NotifySlice from '../features/notify/NotifySlice'\r\nimport SidebarConversationsSlice from '../features/sidebarConversations/SidebarConversationsSlice'\r\nimport themeSlice from '../GeneralSlices/themeSlice'\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        chat: ChatSlice,\r\n        notify: NotifySlice,\r\n        auth: authSlice,\r\n        sidebarConversations: SidebarConversationsSlice,\r\n        newChat: NewChatSlice,\r\n        friend: FriendSlice,\r\n        theme: themeSlice,\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './components/store';\n\nReactDOM.render(\n    <Provider store={store}> <App></App> </Provider>\n    ,\n    document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}