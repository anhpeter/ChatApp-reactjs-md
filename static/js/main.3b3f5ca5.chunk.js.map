{"version":3,"sources":["components/MyAvatar/MyAvatar.js","defines/Slt.js","defines/Config.js","defines/https/UserApi.js","defines/Helper.js","defines/MyTime.js","defines/Socket.js","defines/Socket/SocketEventName.js","defines/Socket/MySocket.js","features/auth/authSlice.js","GeneralSlices/themeSlice.js","components/DayNightSwitch/DayNightSwitch.js","components/IconWithBadge.js","components/RouterLink/RouterLink.js","components/Notifications/Notifications.js","defines/CookieName.js","components/Header/Header.js","defines/styles/MainStyles.js","components/MyAvatarGroup/MyAvatarGroup.js","defines/https/ConversationApi.js","features/chat/ChatSlice.js","components/ConversationLink/ConversationLink.js","components/ConversationItem/ConversationItem.js","features/sidebarConversations/SidebarConversationsSlice.js","components/ConversationList/ConversationList.js","features/NewChat/NewChatSlice.js","components/Loading/Loading.js","components/Message/Message.js","components/ChatNotification/ChatNotification.js","components/Messages/Messages.js","components/SendingInput/SendingInput.js","features/notify/NotifySlice.js","defines/Message.js","components/SendMessageBar/SendMessageBar.js","components/UserTyping/UserTyping.js","components/NormalChat/NormalChat.js","components/Receiver/Receiver.js","components/SuggestionUsers/SuggestionUsers.js","components/NewChat/NewChat.js","components/ChatBox/ChatBox.js","components/AppTitle/AppTitle.js","components/OnlineUser/OnlineUsers.js","features/chat/Chat.js","defines/configs/FormErrors.js","components/SignIn/SignIn.js","defines/validates/UserValidates.js","components/SignUp/SignUp.js","features/notify/Notify.js","components/PrivateRoute/PrivateRoute.js","components/FriendAction/SentRequestAction.js","components/FriendAction/RequestAction.js","components/FriendAction/StrangerAction.js","components/FriendAction/FriendAction.js","components/FriendList/FriendList.js","components/FriendBox/FriendBox.js","components/Friends/Friends.js","components/AuthRoute/AuthRoute.js","App.js","components/store.js","index.js"],"names":["StyledBadge","withStyles","theme","badge","backgroundColor","color","boxShadow","palette","background","paper","transform","opacity","Badge","useStyles","makeStyles","root","display","margin","spacing","MyAvatar","name","picture","online","sizeInPixel","classes","myStyle","width","height","avatar","Avatar","style","alt","src","className","overlap","anchorOrigin","vertical","horizontal","variant","Slt","mainAppBar","API_ADDRESS","prefix","UserApi","findByUsername","username","a","Axios","get","params","data","findByUsernameAndPassword","password","post","createAccount","findAllFriendsByUsername","findSentRequestFriendById","id","findStrangerByUsername","sentFriendRequest","friendId","unfriend","cancelFriendRequest","deleteFriendRequest","confirmFriendRequest","findUsersByIds","ids","findReceivers","exceptIds","Helper","ucFirst","str","slice","toUpperCase","titleCase","words","trim","split","length","reduce","accumulator","this","sleep","ms","Promise","resolve","setTimeout","isFn","fn","format","string","result","key","replace","getArrayOfFieldValue","items","field","type","map","item","toString","arrayDiff","arr1","arr2","biggerArr","smallerArr","forEach","indexOf","push","MyTime","getUTCNow","now","Date","time","getTime","offset","getTimezoneOffset","getCurrentTimeByUTCTime","utcTime","getMessageTimeString","itemDate","getFullYear","getMonth","getDate","dateformat","Socket","io","SocketEventName","updateUser","signIn","signOut","getOnlineUsers","typing","stopTyping","sendMessage","receiveMessage","newMessageNotification","onlineUsers","joinUsersToConversation","joinRoom","leaveRoom","acceptFriend","addFriend","friendRequestCanceled","friendRejected","friendAccepted","friendRequested","friendUnfriend","MySocket","emitSignIn","user","emit","emitSignOut","emitGetOnlineUsers","emitUpdateUserById","emitSendMessage","message","conversationId","emitTyping","emitStopTyping","emitJoinUsersToConversation","emitJoinRoom","roomName","emitLeaveRoom","emitAddFriend","emitAcceptFriend","emitUnfriend","emitCancelFriendRequest","emitDeleteFriendRequest","onUpdateUser","callback","on","onReceiveMessage","onOnlineUsers","onTyping","onStopTyping","onNewMessageNotification","onFriendAccepted","onFriendRequested","onFriendUnFriend","onFriendRequestCanceled","onFriendRejected","off","eventName","loginThunk","createAsyncThunk","response","sentFriendRequestThunk","loginWithUser","state","action","payload","isLogged","authSlice","createSlice","initialState","status","error","reducers","login","extraReducers","pending","fulfilled","rejected","authError","auth","authUser","authUserId","_id","actions","themeSLice","switchThemeType","DayNightSwitch","useSelector","dispatch","useDispatch","useCookies","cookies","setCookie","useEffect","IconButton","aria-label","onClick","cookieValue","JSON","stringify","right","top","border","padding","RouterLink","children","rest","all","Notifications","useHistory","Fragment","to","Tooltip","title","LOGGED_USER","Header","props","removeCookie","logged","authStatus","pathName","useLocation","pathname","history","toolsHtml","Box","alignItems","justifyContent","mr","single","Button","disabled","startIcon","Typography","AppBar","position","Toolbar","textDecoration","colors","mainStyles","createStyles","table","minWidth","chatSection","overflow","headBG","borderRight500","borderRight","borderLeft500","borderLeft","messageArea","overflowY","RoundLightGrayInputStyle","paddingLeft","paddingRight","borderRadius","buttonStyle","textTransform","flexCenterVerticalStyle","flexCenterStyle","defaultContainerPaddingStyle","MyAvatarGroup","max","avatars","index","AvatarGroup","ConversationApi","findConversationById","findConversationByMemberIds","findSidebarConversationById","listConversationsForListDisplay","findConversationInfoByUserIdsOrCreateIfNotExist","getHomeConversation","createConversationWithMemberIds","messageParams","fetchConversationByMemberIds","fetchConversationById","ChatSlice","findConversationByUserIdsOrCreateIfNotExist","conversation","sidebarConversations","appendMessage","messages","reset","conversationStatus","chat","conversationMemberIds","members","conversationMessages","ConversationLink","convoMemberIds","onItemClick","showConversation","isNew","useStyle","truncateListItemStyle","textOverflow","whiteSpace","GenerateAvatarGroup","ConversationItem","icon","convoId","friends","filter","lastMessageText","lastMessage","from","text","ListItem","button","selected","ListItemAvatar","Hidden","xsDown","ListItemText","primary","secondary","fetchConversations","fetchAndPrependConversationById","conversationsAdapter","createEntityAdapter","selectId","sortComparer","b","getInitialState","SidebarConversationsSlice","updateLastMessage","entities","upsertOne","upsertMany","getSelectors","selectAllSidebarConversations","selectAll","selectSidebarConversationIds","selectById","selectIds","ConversationList","conversations","loggedUser","myFunc","removeListener","conversationsHtml","i","Grid","container","xs","List","enabled","receivers","NewChatSlice","setEnabled","removeReceiverById","appendReceiver","removeLastReceiver","newChatReceivers","newChat","isNewChatEnable","newChatReceiver","removeNewChatReceiverById","appendNewChatReceiver","removeLastNewChatReceiver","setNewChatEnabled","resetNewChat","Loading","align","Message","notShowAvatar","ownMessage","flexPos","placement","ChatNotification","content","usernameHtml","component","emptyHtml","mt","Messages","mainStyle","newChatEnabled","messagesHtml","nextItem","document","getElementById","scrollTop","scrollHeight","scroll","myTimeoutObj","NotifySlice","open","timeout","setNotify","notify","invalid","fail","welcomeNewAccount","PleaseTypeMessage","newMessage","unfriended","SendingInput","useState","inputMsg","setInputMsg","isTyping","setTyping","convo","onSendingMessage","onCreateConversationsWithReceicersAndFristMessage","receiverIds","concat","onSubmit","e","preventDefault","alert","onSendingMessageClick","md","TextField","autoFocus","inputProps","autoComplete","value","fullWidth","onChange","target","onKeyUp","which","clearTimeout","onBlur","Fab","Send","SendMessageBar","UserTyping","typingUsers","setTypingUsers","typingHtml","process","Paper","elevation","NormalChat","loggedUserId","useParams","receiver","messageObj","SuggestionUsers","dense","generateSuggestionUsers","SelectedUsers","onCloseClick","Alert","severity","size","fontSize","Receiver","onFriendIdSelected","mounted","setMounted","suggestionUsers","setSuggestionUsers","inputVal","setInputVal","receiverName","setReceiverName","inputRef","useRef","fetchUsers","solveSelectedUsers","oldVal","newVal","placeholder","ref","current","querySelector","focus","NewChat","setFriendId","zIndex","ChatBox","loaded","setDisplay","convoStatus","mainHtml","bottom","left","Divider","AppTitle","OnlineUsers","setOnlineUsers","isShow","setShow","onlineUsersHtml","smDown","Chat","appBarHeight","p","FormErrors","required","lengthGreater","noSpecialCharacter","unique","match","marginTop","flexDirection","main","form","submit","SignIn","isSubmitClicked","setSubmitClicked","authErr","Container","maxWidth","CssBaseline","initialValues","passwordConfirmation","validationSchema","yup","values","setSubmitting","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","dirty","showErrors","label","helperText","noValidate","isUsernameExist","isLengthValid","noSpecialCharacters","test","UserValidates","setUsername","timeoutObj","context","reject","isExist","matches","oneOf","SignUp","Notify","isOpen","msg","msgType","duration","handleClose","event","reason","Snackbar","autoHideDuration","onClose","PrivateRoute","render","location","SentRequestAction","onCancelClick","onConfirmClick","onDeleteClick","onAddFriend","anchorEl","setAnchorEl","Boolean","onUnfriend","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","PaperProps","maxHeight","ITEM_HEIGHT","MenuItem","FriendList","isLoading","itemsHtml","localType","friend","request","sent_request","getType","CardActions","lg","Card","CardHeader","subheader","AllFriendList","setItems","setLoading","fetchItems","SentRequestList","RequestList","PeopleMayKnowList","FriendBox","paddingTop","a11yProps","friendTabs","Friends","React","setValue","tab","friendsTab","Tabs","newValue","indicatorColor","scrollButtons","Tab","AuthRoute","App","window","addEventListener","scrollTo","themeType","createMuiTheme","ThemeProvider","ba","minHeight","path","exact","configureStore","reducer","themeSlice","ReactDOM","store"],"mappings":"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","file":"static/js/main.3b3f5ca5.chunk.js","sourcesContent":["import React from 'react';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0\r\n        }\r\n    }\r\n}))(Badge);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function MyAvatar({ name, picture, online, sizeInPixel }) {\r\n    const classes = useStyles();\r\n    const myStyle = true ? { width: `${sizeInPixel}px`, height: `${sizeInPixel}px` } : {};\r\n    const avatar = <Avatar style={myStyle} alt={name} src={picture} />;\r\n    return (\r\n        <div className={classes.root}>\r\n            {(online) ? (\r\n                <StyledBadge\r\n                    overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right'\r\n                    }}\r\n                    variant=\"dot\">\r\n                    {avatar}\r\n                </StyledBadge>\r\n            ) : avatar\r\n            }\r\n        </div>\r\n    );\r\n}","const Slt = {\r\n    mainAppBar: '#main-app-bar'\r\n}\r\nexport default Slt;","export const API_ADDRESS = 'https://pa-chat-api.glitch.me';","import Axios from \"axios\";\r\nimport { API_ADDRESS } from \"../Config\";\r\n\r\nconst prefix = `${API_ADDRESS}/user`;\r\n\r\nconst UserApi = {\r\n    findByUsername: async function (username) {\r\n        const data = await Axios.get(`${prefix}/getUserByUsername`, {\r\n            params: {\r\n                username\r\n            }\r\n        })\r\n        return data.data;\r\n    },\r\n    findByUsernameAndPassword: async function (username, password) {\r\n        const data = await Axios.post(`${prefix}/getUserByUsernameAndPassword`, { username, password })\r\n        return data.data;\r\n    },\r\n    createAccount: async function (username, password) {\r\n        const data = await Axios.post(`${prefix}/createAccount`, { username, password })\r\n        return data.data;\r\n    },\r\n    findAllFriendsByUsername: async function (username) {\r\n        const data = await Axios.get(`${prefix}/getFriendsByUsername`, {\r\n            params: {\r\n                username\r\n            }\r\n        })\r\n        return data.data;\r\n    },\r\n    findSentRequestFriendById: async function (id) {\r\n        const data = await Axios.get(`${prefix}/getSentRequestFriendById`, {\r\n            params: {\r\n                id\r\n            }\r\n        })\r\n        return data.data;\r\n    },\r\n    findStrangerByUsername: async function (username) {\r\n        const data = await Axios.get(`${prefix}/getStrangerByUsername`, {\r\n            params: {\r\n                username\r\n            }\r\n        })\r\n        return data.data;\r\n    },\r\n\r\n    // FRIEND\r\n    sentFriendRequest: async function (id, friendId) {\r\n        const data = await Axios.post(`${prefix}/sentFriendRequest`, { id, friendId });\r\n        return data.data;\r\n    },\r\n    unfriend: async function (id, friendId) {\r\n        const data = await Axios.post(`${prefix}/unfriend`, { id, friendId });\r\n        return data.data;\r\n    },\r\n    cancelFriendRequest: async function (id, friendId) {\r\n        const data = await Axios.post(`${prefix}/cancelFriendRequest`, { id, friendId });\r\n        return data.data;\r\n    },\r\n    deleteFriendRequest: async function (id, friendId) {\r\n        const data = await Axios.post(`${prefix}/deleteFriendRequest`, { id, friendId });\r\n        return data.data;\r\n    },\r\n    confirmFriendRequest: async function (id, friendId) {\r\n        const data = await Axios.post(`${prefix}/confirmFriendRequest`, { id, friendId });\r\n        return data.data;\r\n    },\r\n    findUsersByIds: async function (ids) {\r\n        const data = await Axios.post(`${prefix}/getUsersByIds`, { ids });\r\n        return data.data;\r\n    },\r\n    findReceivers: async function (username, exceptIds) {\r\n        const data = await Axios.post(`${prefix}/getReceivers`, { username, exceptIds,\r\n        });\r\n        return data.data;\r\n    },\r\n}\r\nexport default UserApi;","const Helper = {\r\n    ucFirst: function (str) {\r\n        if (str) {\r\n            return str.slice(0, 1).toUpperCase() + str.slice(1);\r\n        }\r\n    },\r\n    titleCase: function (str) {\r\n        if (str) {\r\n            let result;\r\n            str = str.trim();\r\n            let words = str.split(' ');\r\n            if (words.length > 1)\r\n                result = words.reduce((accumulator) => {\r\n                    return this.ucFirst(accumulator) + ' ';\r\n                })\r\n            else result = this.ucFirst(words[0]);\r\n            result = result.trim();\r\n            return result;\r\n        }\r\n    },\r\n    sleep: ms => new Promise(resolve => setTimeout(() => { resolve(); }, ms)),\r\n    isFn: fn => typeof fn === 'function',\r\n    format: function (string, ...params) {\r\n        let result = string;\r\n        if (string && params.length > 0) {\r\n            for (let key in params) {\r\n                result = result.replace(`{${key}}`, params[key]);\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    getArrayOfFieldValue: function (items, field, type) {\r\n        const arrayOfFieldValue = items.map((item) => {\r\n            if (type === 'string') return item[field].toString();\r\n            return item[field];\r\n        })\r\n        return arrayOfFieldValue;\r\n    },\r\n    arrayDiff: function (arr1, arr2) {\r\n        let biggerArr;\r\n        let smallerArr;\r\n        let result = [];\r\n        if (arr1.length > arr2.length) {\r\n            biggerArr = arr1;\r\n            smallerArr = arr2;\r\n        }\r\n        else {\r\n            biggerArr = arr2;\r\n            smallerArr = arr1;\r\n        }\r\n        biggerArr.forEach((item) => {\r\n            if (smallerArr.indexOf(item) === -1) result.push(item);\r\n        })\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Helper;","import * as dateformat from 'dateformat';\r\nconst MyTime = {\r\n\r\n    getUTCNow: function () {\r\n        var now = new Date();\r\n        var time = now.getTime();\r\n        var offset = now.getTimezoneOffset();\r\n        offset = offset * 60000;\r\n        return time - offset;\r\n    },\r\n\r\n    getCurrentTimeByUTCTime: function (utcTime) {\r\n        let now = new Date();\r\n        let offset = now.getTimezoneOffset();\r\n        offset = offset * 60000;\r\n        return utcTime + offset;\r\n    },\r\n\r\n    getMessageTimeString: function (time) {\r\n        let itemDate = new Date(time);\r\n        let now = new Date();\r\n        let result\r\n        if (\r\n            (\r\n                now.getFullYear() === itemDate.getFullYear() &&\r\n                now.getMonth() === itemDate.getMonth() &&\r\n                now.getDate() === itemDate.getDate()\r\n            )\r\n\r\n        )\r\n            result = dateformat(time, 'HH:MM');\r\n        else\r\n            result = dateformat(time, 'dd/mm/yyyy HH:MM');\r\n        return result;\r\n    },\r\n}\r\nexport default MyTime;","import { io } from \"socket.io-client\";\r\nimport { API_ADDRESS } from \"./Config\";\r\n\r\nvar connectionOptions = {\r\n    \"force new connection\": true,\r\n    \"reconnectionAttempts\": \"Infinity\",\r\n    \"timeout\": 10000,\r\n    \"transports\": [\"websocket\"]\r\n};\r\nconst Socket = io(API_ADDRESS, connectionOptions);\r\nexport default Socket;","const SocketEventName = {\r\n    updateUser: 'update-user',\r\n    signIn: 'sign-in',\r\n    signOut: 'sign-out',\r\n    getOnlineUsers: 'get-online-users',\r\n    typing: 'typing',\r\n    stopTyping: 'stop-typing',\r\n    sendMessage: 'send-message',\r\n    receiveMessage: 'receive-message',\r\n    newMessageNotification: 'new-message-notification',\r\n    onlineUsers: 'online-users',\r\n    joinUsersToConversation: 'join-users-to-conversation',\r\n    joinRoom: 'join-room',\r\n    leaveRoom: 'leave-room',\r\n    acceptFriend: 'accept-friend',\r\n    addFriend: 'add-friend',\r\n    unfriend: 'unfriend',\r\n    cancelFriendRequest: 'cancel-friend-request',\r\n    deleteFriendRequest: 'delete-friend-request',\r\n    friendRequestCanceled: 'friend-request-canceled',\r\n    friendRejected: 'friend-rejected',\r\n    friendAccepted: 'friend-accepted',\r\n    friendRequested: 'friend-requested',\r\n    friendUnfriend: 'friend-unfriend',\r\n}\r\n\r\nexport default SocketEventName;","import Helper from '../Helper';\r\nimport MyTime from '../MyTime';\r\nimport Socket from '../Socket';\r\nimport SocketEventName from './SocketEventName';\r\nconst MySocket = {\r\n    // EMIT\r\n    emitSignIn: function (user) {\r\n        Socket.emit(SocketEventName.signIn, { user });\r\n    },\r\n    emitSignOut: function (user) {\r\n        Socket.emit(SocketEventName.signOut, { user });\r\n    },\r\n    emitGetOnlineUsers: function () {\r\n        Socket.emit(SocketEventName.getOnlineUsers);\r\n    },\r\n    emitUpdateUserById: function (id) {\r\n        Socket.emit(SocketEventName.updateUser, { id });\r\n    },\r\n    emitSendMessage: function (user, message, conversationId) {\r\n        Socket.emit(SocketEventName.sendMessage, { user, message, conversationId });\r\n    },\r\n    emitTyping: function (user, conversationId) {\r\n        Socket.emit(SocketEventName.typing, { user, conversationId });\r\n    },\r\n    emitStopTyping: function (username, conversationId) {\r\n        Socket.emit(SocketEventName.stopTyping, { username, conversationId });\r\n    },\r\n    emitJoinUsersToConversation: function (ids, conversationId) {\r\n        Socket.emit(SocketEventName.joinUsersToConversation, { ids, conversationId });\r\n    },\r\n    emitJoinRoom: function (roomName) {\r\n        Socket.emit(SocketEventName.joinRoom, { roomName });\r\n    },\r\n    emitLeaveRoom: function (roomName) {\r\n        Socket.emit(SocketEventName.leaveRoom, { roomName });\r\n    },\r\n\r\n    // FRIEND ACTION\r\n    emitAddFriend: function (user, friendId) {\r\n        Socket.emit(SocketEventName.addFriend, { user, friendId });\r\n    },\r\n    emitAcceptFriend: function (user, friendId) {\r\n        Socket.emit(SocketEventName.acceptFriend, { user, friendId });\r\n    },\r\n    emitUnfriend: function (user, friendId) {\r\n        Socket.emit(SocketEventName.unfriend, { user, friendId });\r\n    },\r\n    emitCancelFriendRequest: function (user, friendId) {\r\n        Socket.emit(SocketEventName.cancelFriendRequest, { user, friendId });\r\n    },\r\n    emitDeleteFriendRequest: function (user, friendId) {\r\n        Socket.emit(SocketEventName.deleteFriendRequest, { user, friendId });\r\n    },\r\n\r\n    // ON\r\n    onUpdateUser: function (callback) {\r\n        Socket.on(SocketEventName.updateUser, (data) => {\r\n            if (Helper.isFn(callback)) callback(data);\r\n        })\r\n    },\r\n    onReceiveMessage: function (callback) {\r\n        Socket.on(SocketEventName.receiveMessage, (data) => {\r\n            if (Helper.isFn(callback)) callback(data);\r\n        })\r\n    },\r\n    onOnlineUsers: function (callback) {\r\n        Socket.on(SocketEventName.onlineUsers, (data) => {\r\n            if (Helper.isFn(callback)) callback(data);\r\n        })\r\n    },\r\n    onTyping: function (callback) {\r\n        Socket.on(SocketEventName.typing, (data) => {\r\n            if (Helper.isFn(callback)) callback(data);\r\n        })\r\n    },\r\n    onStopTyping: function (callback) {\r\n        Socket.on(SocketEventName.stopTyping, (data) => {\r\n            if (Helper.isFn(callback)) callback(data);\r\n        })\r\n    },\r\n\r\n    // NOTIFICATION\r\n    onNewMessageNotification: function (callback) {\r\n        Socket.on(SocketEventName.newMessageNotification, callback)\r\n    },\r\n\r\n    // FRIEND ACTIONS\r\n    onFriendAccepted: function (callback) {\r\n        Socket.on(SocketEventName.friendAccepted, callback)\r\n    },\r\n    onFriendRequested: function (callback) {\r\n        Socket.on(SocketEventName.friendRequested, callback)\r\n    },\r\n    onFriendUnFriend: function (callback) {\r\n        Socket.on(SocketEventName.friendUnfriend, callback)\r\n    },\r\n    onFriendRequestCanceled: function (callback) {\r\n        Socket.on(SocketEventName.friendRequestCanceled, callback)\r\n    },\r\n    onFriendRejected: function (callback) {\r\n        Socket.on(SocketEventName.friendRejected, callback)\r\n    },\r\n    off: function (eventName) {\r\n        Socket.off(eventName);\r\n    },\r\n}\r\nexport default MySocket","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\n\r\nexport const loginThunk = createAsyncThunk('auth/login', async ({ username, password, }) => {\r\n    const response = await UserApi.findByUsernameAndPassword(username, password);\r\n    return response;\r\n})\r\n\r\nexport const sentFriendRequestThunk = createAsyncThunk('auth/sentFriendRequest', async ({ id, friendId, }) => {\r\n    const response = await UserApi.sentFriendRequest(id, friendId);\r\n    return response;\r\n})\r\n\r\nconst initialState = {\r\n    isLogged: false,\r\n    user: null,\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n\r\nconst loginWithUser = (state, action) => {\r\n    MySocket.emitSignIn(action.payload);\r\n    state.user = action.payload;\r\n    state.isLogged = true;\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        login: (state, action) => {\r\n            loginWithUser(state, action)\r\n        },\r\n        updateUser: (state, action) => {\r\n            state.user = action.payload;\r\n        },\r\n        signOut: (state) => {\r\n            MySocket.emitSignOut(state.user);\r\n            state.user = null;\r\n            state.isLogged = false;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        // LOGIN\r\n        [loginThunk.pending]: (state, action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [loginThunk.fulfilled]: (state, action) => {\r\n            const { payload, status } = action.payload;\r\n\r\n            if (status === 'succeeded') {\r\n                loginWithUser(state, { payload });\r\n                state.error = null;\r\n            } else state.error = 'not found';\r\n            state.status = 'succeeded'\r\n        },\r\n        [loginThunk.rejected]: (state, action) => {\r\n            state.error = action.error.message\r\n            state.status = 'failed'\r\n        },\r\n\r\n        // FRIENDS\r\n        [sentFriendRequestThunk.fulfilled]: (state, action) => {\r\n        },\r\n\r\n    }\r\n});\r\n\r\nconst selectors = {\r\n    isLogged: (state) => {\r\n        return state.auth.isLogged;\r\n    },\r\n    authUser: (state) => {\r\n        return state.auth.user;\r\n    },\r\n    status: (state) => {\r\n        return state.auth.status;\r\n    },\r\n    authError: (state) => {\r\n        return state.auth.error;\r\n    },\r\n    authUserId: (state) =>{\r\n        return state.auth.user._id;\r\n    }\r\n}\r\n\r\nexport const { authError, status, isLogged, authUser,  authUserId} = selectors;\r\n\r\n\r\nexport const {\r\n    signOut, login, updateUser\r\n} = authSlice.actions\r\n\r\nexport default authSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    type: 'light',\r\n}\r\n\r\nconst themeSLice = createSlice({\r\n    name: 'theme',\r\n    initialState,\r\n    reducers: {\r\n        switchThemeType: (state) => {\r\n            state.type = (state.type === 'light') ? 'dark' : 'light';\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    switchThemeType\r\n} = themeSLice.actions\r\nexport default themeSLice.reducer","import React, { useEffect } from 'react'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DayIcon from '@material-ui/icons/Brightness7';\r\nimport NightIcon from '@material-ui/icons/Brightness4';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { switchThemeType } from '../../GeneralSlices/themeSlice';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nexport default function DayNightSwitch() {\r\n    const theme = useSelector((state) => { return state.theme });\r\n    const dispatch = useDispatch();\r\n    const [cookies, setCookie, removeCookie] = useCookies(['theme'])\r\n\r\n    useEffect(() => {\r\n        if (cookies.theme) {\r\n            if (cookies.theme.type) {\r\n                if (cookies.theme.type !== theme.type) {\r\n                    dispatch(switchThemeType());\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    const onSwitch = () => {\r\n        let cookieValue = { ...theme, type: theme.type === 'light' ? 'dark' : 'light', };\r\n        setCookie('theme', JSON.stringify(cookieValue));\r\n        dispatch(switchThemeType());\r\n    }\r\n\r\n    return (\r\n        <IconButton aria-label=\"Day / night toggle\" onClick={onSwitch} color=\"inherit\">\r\n            {(theme.type === 'light') ? <NightIcon></NightIcon> : <DayIcon></DayIcon>}\r\n        </IconButton>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        right: -3,\r\n        top: 5,\r\n        border: '1px solid white',\r\n        padding: '0 4px',\r\n    },\r\n}))(Badge);\r\n\r\nexport default function IconWithBadge({ badgeContent, children, ...rest }) {\r\n    return (\r\n        <IconButton color=\"inherit\" {...rest}>\r\n            <StyledBadge badgeContent={badgeContent || ''} color=\"primary\">\r\n                {children}\r\n            </StyledBadge>\r\n        </IconButton>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function RouterLink({ children, ...rest }) {\r\n    return (\r\n        <Link {...rest} style={{all: 'unset'}}>{children}</Link>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport IconWithBadge from '../IconWithBadge';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { IconButton, Tooltip } from '@material-ui/core';\r\nimport RouterLink from '../RouterLink/RouterLink';\r\n\r\nexport default function Notifications() {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* \r\n            <IconWithBadge badgeContent=\"10\">\r\n                <MailIcon></MailIcon>\r\n            </IconWithBadge>\r\n             */}\r\n            {/* \r\n            <IconWithBadge badgeContent=\"10\" onClick={() => {\r\n                history.push('/friends');\r\n            }}>\r\n            </IconWithBadge>\r\n              */}\r\n            <RouterLink to=\"/chat/new\">\r\n                <Tooltip title=\"Chat\">\r\n                    <IconButton color=\"inherit\">\r\n                        <MessageIcon></MessageIcon>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </RouterLink>\r\n            <RouterLink to=\"/friends\">\r\n                <Tooltip title=\"Friends\">\r\n                    <IconButton color=\"inherit\">\r\n                        <PeopleAltIcon></PeopleAltIcon>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </RouterLink>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","export const LOGGED_USER = 'loggedUser';","import React from 'react'\r\nimport MyAvatar from '../MyAvatar/MyAvatar';\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Box, Button, makeStyles } from '@material-ui/core'\r\n\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport Slt from '../../defines/Slt'\r\nimport { Link, useHistory, useLocation } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { isLogged, authUser, status } from '../../features/auth/authSlice'\r\nimport { signOut } from '../../features/auth/authSlice';\r\nimport { useCookies } from 'react-cookie'\r\nimport DayNightSwitch from '../DayNightSwitch/DayNightSwitch'\r\nimport Notifications from '../Notifications/Notifications';\r\nimport RunAction from '../RunAction/RunAction';\r\nimport { LOGGED_USER } from '../../defines/CookieName';\r\n\r\nexport default function Header(props) {\r\n    const [cookies, setCookie, removeCookie] = useCookies(LOGGED_USER);\r\n    const user = useSelector(authUser);\r\n    const dispatch = useDispatch();\r\n    const logged = useSelector(isLogged);\r\n    const authStatus = useSelector(status);\r\n    const location = useLocation();\r\n    const pathName = location.pathname;\r\n    const history = useHistory();\r\n\r\n    const onSignout = () => {\r\n        removeCookie(LOGGED_USER);\r\n        dispatch(signOut());\r\n        history.push('/');\r\n    }\r\n\r\n    const toolsHtml = (\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n            <Box mr={4}>\r\n                {logged\r\n                    ? <Notifications></Notifications>\r\n                    : null\r\n                }\r\n            </Box>\r\n            {/* \r\n            <RunAction></RunAction>\r\n             */}\r\n            <DayNightSwitch></DayNightSwitch>\r\n            {(logged)\r\n                ? (\r\n                    <MyAvatar name={user.name} single={user.single} picture={user.picture}></MyAvatar>\r\n                )\r\n                : null}\r\n            <Button\r\n                disabled={pathName === '/login'}\r\n                startIcon={(!logged)\r\n                    ? <PersonIcon></PersonIcon>\r\n                    : null}\r\n                color=\"inherit\"\r\n                onClick={() => {\r\n                    onSignout();\r\n                }}>\r\n                <Typography >{(logged)\r\n                    ? 'Sign out'\r\n                    : 'Sign in'}</Typography>\r\n            </Button>\r\n        </Box>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\" color=\"primary\" id={Slt.mainAppBar}>\r\n                <Toolbar\r\n                    style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between'\r\n                    }}>\r\n                    <Typography variant=\"h6\">\r\n                        <Link to=\"/chat\" color=\"inherit\" style={{ color: 'white', textDecoration: 'none' }}>\r\n                            Messenger\r\n                        </Link>\r\n                    </Typography>\r\n                    {(authStatus !== 'loading') ? toolsHtml : null}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n","import { createStyles, makeStyles } from \"@material-ui/core\";\r\n\r\nconst colors = {\r\n    lightGray: '#F0F2F5',\r\n}\r\n\r\nconst mainStyles = makeStyles(theme => createStyles({\r\n    table: {\r\n        minWidth: 650\r\n    },\r\n    chatSection: {\r\n        width: '100%',\r\n        height: '400px',\r\n        overflow: 'auto'\r\n    },\r\n    headBG: {\r\n        backgroundColor: '#e0e0e0'\r\n    },\r\n    borderRight500: {\r\n        borderRight: '1px solid #e0e0e0'\r\n    },\r\n    borderLeft500: {\r\n        borderLeft: '1px solid #e0e0e0'\r\n    },\r\n    messageArea: {\r\n        height: '70vh',\r\n        overflowY: 'auto'\r\n    },\r\n    RoundLightGrayInputStyle: {\r\n        paddingLeft: '10px',\r\n        paddingRight: '10px',\r\n        backgroundColor: colors.lightGray,\r\n        borderRadius: '50px',\r\n    },\r\n    buttonStyle: {\r\n        textTransform: 'none',\r\n    },\r\n    flexCenterVerticalStyle: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    flexCenterStyle: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    defaultContainerPaddingStyle: {\r\n        root: {\r\n            '& > *': {\r\n                padding: theme.spacing(2),\r\n            }\r\n        }\r\n    }\r\n}));\r\n\r\nexport default mainStyles;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\n\r\nexport default function MyAvatarGroup({ items, max = 2 }) {\r\n    const avatars = items.slice(0, max).map((item, index) => {\r\n        return <Avatar key={index} alt={item.name} src={item.src} />;\r\n    })\r\n    return (\r\n        <AvatarGroup max={max} spacing=\"small\">\r\n            {avatars}\r\n        </AvatarGroup>\r\n    );\r\n}\r\n","import Axios from \"axios\";\r\nimport { API_ADDRESS } from \"../Config\";\r\nimport Helper from \"../Helper\";\r\nimport MySocket from '../Socket/MySocket';\r\n\r\nconst prefix = `${API_ADDRESS}/conversation`;\r\n\r\nconst ConversationApi = {\r\n    findConversationById: async function (id) {\r\n        const data = await Axios.get(`${prefix}/getConversationById`, {\r\n            params: {\r\n                id\r\n            }\r\n        });\r\n        return data.data;\r\n    },\r\n    findConversationByMemberIds: async function (ids) {\r\n        const data = await Axios.post(`${prefix}/getConversationByMemberIds`, {\r\n            ids\r\n        });\r\n        return data.data;\r\n    },\r\n    findSidebarConversationById: async function (id) {\r\n        const data = await Axios.get(`${prefix}/getSidebarConversationById`, {\r\n            params: {\r\n                id\r\n            }\r\n        });\r\n        return data.data;\r\n    },\r\n    listConversationsForListDisplay: async function (id) {\r\n        const data = await Axios.get(`${prefix}/listConversationsForListDisplay`, {\r\n            params: {\r\n                id\r\n            }\r\n        });\r\n        return data.data;\r\n    },\r\n    findConversationInfoByUserIdsOrCreateIfNotExist: async function (ids) {\r\n        const data = await Axios.post(`${prefix}/getConversationInfoByUserIdsOrCreateIfNotExist`, { ids });\r\n        return data.data;\r\n    },\r\n    getHomeConversation: async function () {\r\n        const data = await Axios.get(`${prefix}/home`);\r\n        return data.data;\r\n    },\r\n    createConversationWithMemberIds: async function (ids, messageParams = null) {\r\n        const data = await Axios.post(`${prefix}/createConversationWithMemberIds`, { ids, messageParams });\r\n        return data.data;\r\n    }\r\n}\r\nexport default ConversationApi;","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\n\r\nexport const fetchConversationByMemberIds = createAsyncThunk('chat/conversation', async (ids) => {\r\n    const response = await ConversationApi.findConversationByMemberIds(ids);\r\n    return response;\r\n})\r\n\r\nexport const fetchConversationById = createAsyncThunk('chat/conversation', async (id) => {\r\n    const response = await ConversationApi.findConversationById(id);\r\n    return response;\r\n})\r\n\r\nexport const fetchConversationByUserIdsOrCreateIfNotExist = createAsyncThunk('chat/conversation', async (ids) => {\r\n    const response = await ConversationApi.findConversationByUserIdsOrCreateIfNotExist(ids);\r\n    return response;\r\n})\r\n\r\nexport const fetchHomeConversation = createAsyncThunk('chat/conversation', async () => {\r\n    const response = await ConversationApi.getHomeConversation();\r\n    return response;\r\n})\r\n\r\nconst initialState = {\r\n    conversation: {},\r\n    sidebarConversations: [],\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n\r\nconst ChatSlice = createSlice({\r\n    name: 'chat',\r\n    initialState,\r\n    reducers: {\r\n        appendMessage: (state, action) => {\r\n            state.conversation.messages.push(action.payload);\r\n        },\r\n        reset: (state, action) => {\r\n            state.conversation = {};\r\n            state.status = 'idle';\r\n            state.error = null;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        'chat/conversation/pending': (state, action) => {\r\n            state.status = 'loading'\r\n        },\r\n        'chat/conversation/fulfilled': (state, action) => {\r\n            const { payload, status } = action.payload;\r\n\r\n            if (status === 'succeeded') {\r\n                state.conversation = payload;\r\n                state.error = null;\r\n            } else state.error = 'not found';\r\n            state.status = 'succeeded'\r\n        },\r\n        'chat/conversation/rejected': (state, action) => {\r\n            state.error = action.error.message\r\n            state.status = 'failed'\r\n        },\r\n    }\r\n});\r\n\r\nconst selectors = {\r\n    conversation: (state) => {\r\n        return state.chat.conversation;\r\n    },\r\n    conversationMessages: (state) => {\r\n        return state.chat.conversation.messages || [];\r\n    },\r\n    conversationId: (state) => {\r\n        return state.chat.conversation._id;\r\n    },\r\n    conversationStatus: (state) => {\r\n        return state.chat.status;\r\n    },\r\n    conversationError: (state) => {\r\n        return state.chat.error;\r\n    },\r\n    conversationMemberIds: (state) => {\r\n        return state.chat.conversation.members;\r\n    }\r\n}\r\n\r\nexport const { conversationStatus, conversationError, conversation, conversationMemberIds, conversationId, conversationMessages } = selectors;\r\n\r\nexport const {reset, appendMessage } = ChatSlice.actions\r\n\r\nexport default ChatSlice.reducer;","import { Box } from '@material-ui/core';\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Helper from '../../defines/Helper';\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport { conversationMemberIds } from '../../features/chat/ChatSlice';\r\n\r\nexport default function ConversationLink({ children, item, ...rest }) {\r\n    const history = useHistory();\r\n    const user = useSelector(authUser) || {};\r\n    const convoMemberIds = useSelector(conversationMemberIds);\r\n    const onItemClick = async () => {\r\n        const showConversation = async () => {\r\n            const data = await ConversationApi.findConversationInfoByUserIdsOrCreateIfNotExist([user._id, item._id]);\r\n            const { status, payload } = data;\r\n            if (status === 'succeeded') {\r\n                const { members, isNew, _id: conversationId } = payload;\r\n                if (isNew) {\r\n                    //const memberIds = Helper.getArrayOfFieldValue(members, '_id', 'string');\r\n                    MySocket.emitJoinUsersToConversation(members, conversationId);\r\n                }\r\n                const { _id } = data.payload;\r\n                history.push(`/chat/t/${_id}`);\r\n            }\r\n        }\r\n        if (!convoMemberIds) await showConversation();\r\n        else if (Helper.arrayDiff(convoMemberIds, [user._id, item._id]).length > 0) await showConversation();\r\n    }\r\n    return (\r\n        <Box {...rest} onClick={onItemClick}> {children}</Box>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MyAvatar from '../MyAvatar/MyAvatar';\r\nimport MyAvatarGroup from '../MyAvatarGroup/MyAvatarGroup';\r\nimport { Avatar, Box, Hidden, ListItemAvatar, makeStyles } from '@material-ui/core';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport ConversationLink from '../ConversationLink/ConversationLink';\r\nimport RouterLink from '../RouterLink/RouterLink';\r\nimport { conversationId } from '../../features/chat/ChatSlice';\r\n\r\nconst useStyle = makeStyles({\r\n    truncateListItemStyle: {\r\n        '& > p': {\r\n            overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap'\r\n        }\r\n    }\r\n})\r\n\r\nconst GenerateAvatarGroup = ({ items }) => {\r\n    items = items.map((item) => {\r\n        return {\r\n            name: item.username,\r\n            src: item.picture,\r\n        }\r\n    })\r\n    return <MyAvatarGroup items={items}></MyAvatarGroup>\r\n}\r\n\r\n\r\nexport default function ConversationItem({ item, online, icon }) {\r\n    const classes = useStyle();\r\n    const user = useSelector(authUser);\r\n    const convoId = useSelector(conversationId);\r\n    const { members } = item;\r\n    const friends = members.filter((item) => {\r\n        return item._id !== user._id;\r\n    })\r\n    let name, lastMessageText = null;\r\n    if (members.length === 2) {\r\n        name = friends[0].username;\r\n    } else {\r\n        name = `${friends[0].username} and ${friends.length - 1} others`;\r\n    }\r\n    if (item.lastMessage) {\r\n        let prefix = (item.lastMessage) ? (item.lastMessage.from._id === user._id ? 'you: ' : (friends.length > 1 ? `${item.lastMessage.from.username}: ` : null)) : null;\r\n        lastMessageText = prefix !== null ? `${prefix} ${item.lastMessage.text}` : item.lastMessage.text;\r\n    }\r\n    return (\r\n        <RouterLink to={`/chat/t/${item._id}`}>\r\n            <ListItem button selected={convoId === item._id}>\r\n                <ListItemAvatar style={{ width: '90px' }}>\r\n                    {\r\n                        icon ? (<Avatar> {icon} </Avatar>) :\r\n                            (\r\n                                members.length === 2\r\n                                    ? <MyAvatar online={online} name={name} single={true} picture={friends[0].picture}></MyAvatar>\r\n                                    : <GenerateAvatarGroup items={friends}></GenerateAvatarGroup>\r\n                            )\r\n                    }\r\n                </ListItemAvatar>\r\n                <Hidden xsDown>\r\n                    <ListItemText className={classes.truncateListItemStyle} primary={name} secondary={lastMessageText}></ListItemText>\r\n                </Hidden>\r\n            </ListItem >\r\n        </RouterLink>\r\n    )\r\n}\r\n","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit'\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\n\r\nexport const fetchConversations = createAsyncThunk('sidebarConversations/fetchConversations', async ({ id }) => {\r\n    const response = await ConversationApi.listConversationsForListDisplay(id)\r\n    return response;\r\n})\r\n\r\nexport const fetchAndPrependConversationById = createAsyncThunk('sidebarConversations/fetchAndPrependConversationById', async ({ id }) => {\r\n    const response = await ConversationApi.findSidebarConversationById(id)\r\n    return response;\r\n})\r\n\r\nconst conversationsAdapter = createEntityAdapter({\r\n    selectId: item => item._id,\r\n    sortComparer: (a, b) => -(a.lastMessage.time - b.lastMessage.time)\r\n})\r\n\r\nconst initialState = conversationsAdapter.getInitialState({\r\n    status: 'idle',\r\n    error: null\r\n})\r\n\r\n\r\nconst SidebarConversationsSlice = createSlice({\r\n    name: 'sidebarConversations',\r\n    initialState,\r\n    reducers: {\r\n        updateLastMessage: (state, action) => {\r\n            const { id, message } = action.payload;\r\n            const item = state.entities[id];\r\n            if (item) {\r\n                item.lastMessage = message;\r\n                conversationsAdapter.upsertOne(state, item)\r\n            } else {\r\n                fetchAndPrependConversationById({ id });\r\n            }\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchAndPrependConversationById.fulfilled]: (state, action) => {\r\n            const { payload, status } = action.payload;\r\n            if (status === 'succeeded') conversationsAdapter.upsertOne(state, payload);\r\n        },\r\n        [fetchConversations.pending]: (state, action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchConversations.fulfilled]: (state, action) => {\r\n            const { payload, status } = action.payload;\r\n            if (status === 'succeeded') {\r\n                conversationsAdapter.upsertMany(state, payload)\r\n                state.error = null;\r\n            } else state.error = 'not found';\r\n            state.status = 'succeeded'\r\n        },\r\n\r\n    }\r\n\r\n});\r\n\r\nconst selectors = {\r\n    isConversationExist: (state, id) => {\r\n        return (state.sidebarConversations.ids.indexOf(id) > -1)\r\n    }\r\n}\r\n\r\nexport const { isConversationExist } = selectors;\r\nexport const {\r\n    selectAll: selectAllSidebarConversations,\r\n    selectById: selectSidebarConversationById,\r\n    selectIds: selectSidebarConversationIds\r\n    // Pass in a selector that returns the posts slice of state\r\n} = conversationsAdapter.getSelectors(state => state.sidebarConversations)\r\n\r\n\r\nexport const {\r\n    updateLastMessage\r\n} = SidebarConversationsSlice.actions\r\nexport default SidebarConversationsSlice.reducer","import React, { useEffect, useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport SearchBar from '../SearchBar/SearchBar'\r\nimport { Box, Hidden } from '@material-ui/core'\r\nimport mainStyles from '../../defines/styles/MainStyles'\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ConversationItem from '../ConversationItem/ConversationItem'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchAndPrependConversationById, fetchConversations, selectAllSidebarConversations, selectSidebarConversationIds, updateLastMessage } from '../../features/sidebarConversations/SidebarConversationsSlice'\r\nimport { authUser } from '../../features/auth/authSlice'\r\nimport MySocket from '../../defines/Socket/MySocket'\r\nimport SocketEventName from '../../defines/Socket/SocketEventName'\r\nimport Socket from '../../defines/Socket'\r\nimport { conversationId } from '../../features/chat/ChatSlice'\r\n\r\n\r\nexport default function ConversationList() {\r\n    const classes = mainStyles();\r\n    const dispatch = useDispatch();\r\n    const conversations = useSelector(selectAllSidebarConversations);\r\n    const loggedUser = useSelector(authUser);\r\n    const ids = useSelector(selectSidebarConversationIds);\r\n    const convoId = useSelector(conversationId);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchConversations({ id: loggedUser._id }));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const myFunc = (data) => {\r\n            const { message, conversationId } = data;\r\n            if (ids.indexOf(conversationId) > -1) {\r\n                dispatch(updateLastMessage({ id: conversationId, message }));\r\n            } else {\r\n                dispatch(fetchAndPrependConversationById({ id: conversationId }));\r\n            }\r\n        }\r\n        MySocket.onNewMessageNotification(myFunc)\r\n        return () => {\r\n            Socket.removeListener(SocketEventName.newMessageNotification, myFunc);\r\n        }\r\n    }, [convoId, ids])\r\n\r\n\r\n    const conversationsHtml = conversations.map((item, i) => {\r\n        return (\r\n            <ConversationItem key={i} item={item}></ConversationItem>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Grid container >\r\n            {/* SEARCH BAR */}\r\n            {/* \r\n            <Grid item xs={12}>\r\n                <Box my={2}>\r\n                    <SearchBar></SearchBar>\r\n                </Box>\r\n            </Grid>\r\n             */}\r\n\r\n            <Grid item xs={12} style={{ height: '100%' }}>\r\n                {/* \r\n                <Box mt={2} >\r\n                    <HomeConversationItem></HomeConversationItem>\r\n                </Box>\r\n                 */}\r\n                <List className=\"custom-scrollbar conversation-list\">\r\n                    {conversationsHtml}\r\n                </List>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nconst initialState = {\r\n    enabled: false,\r\n    receivers: [],\r\n}\r\n\r\nconst NewChatSlice = createSlice({\r\n    name: 'newChat',\r\n    initialState,\r\n    reducers: {\r\n        setEnabled: (state, action) => {\r\n            state.enabled = action.payload;\r\n        },\r\n        removeReceiverById: (state, action) => {\r\n            state.receivers = state.receivers.filter((item) => {\r\n                return item._id !== action.payload;\r\n            })\r\n        },\r\n        appendReceiver: (state, action) => {\r\n            state.receivers.push(action.payload);\r\n        },\r\n        removeLastReceiver: (state, action) => {\r\n            if (state.receivers.length > 0) {\r\n                state.receivers = (state.receivers.slice(0, -1));\r\n            }\r\n        },\r\n        reset: (state, action) => {\r\n            state.enabled = initialState.enabled;\r\n            state.receivers = initialState.receivers;\r\n        }\r\n    }\r\n});\r\n\r\nconst selectors = {\r\n    isNewChatEnable: (state) => {\r\n        return state.newChat.enabled\r\n    },\r\n    newChatReceivers: (state) => {\r\n        return state.newChat.receivers\r\n    },\r\n    newChatReceiver: (state) => {\r\n        if (state.newChat.receivers.length === 1) return state.newChat.receivers[0];\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const { newChatReceivers, isNewChatEnable, newChatReceiver } = selectors;\r\n\r\nexport const {\r\n    removeReceiverById: removeNewChatReceiverById,\r\n    appendReceiver: appendNewChatReceiver,\r\n    removeLastReceiver: removeLastNewChatReceiver,\r\n    setEnabled: setNewChatEnabled,\r\n    reset: resetNewChat,\r\n} = NewChatSlice.actions\r\nexport default NewChatSlice.reducer","import { Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport default function Loading() {\r\n    return (\r\n        <Typography align=\"center\" className=\"text-muted\">Loading...</Typography>\r\n    )\r\n}\r\n","import { Box, Grid, Tooltip, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MyAvatar from '../MyAvatar/MyAvatar';\r\nimport MyTime from '../../defines/MyTime';\r\n\r\nexport default function Message({ notShowAvatar, ownMessage, time, user, message }) {\r\n    const avatar = !notShowAvatar ? (<MyAvatar sizeInPixel={20} name={user.username} picture={user.picture}></MyAvatar>) : null;\r\n    const position = (ownMessage) ? 'right' : 'left';\r\n    const flexPos = (ownMessage) ? 'flex-end' : 'flex-start';\r\n    const placement = (ownMessage) ? 'bottom-start' : 'bottom-end';\r\n    return (\r\n        <ListItem key=\"1\">\r\n            <Box width=\"100%\" style={{ display: 'flex', justifyContent: flexPos, alignItems: 'flex-end' }}>\r\n                {/* AVATAR */}\r\n                {!ownMessage ? avatar : null}\r\n\r\n                {/* MESSAGE AND TIME */}\r\n                <Box className={`message ${position}-message ${!ownMessage && notShowAvatar ? 'ml-avatar' : ''}`}>\r\n                    <Tooltip title={MyTime.getMessageTimeString(MyTime.getCurrentTimeByUTCTime(time))} placement={placement}>\r\n                        <ListItemText align={position} primary={message} ></ListItemText>\r\n                    </Tooltip>\r\n                </Box>\r\n            </Box>\r\n\r\n        </ListItem>\r\n    )\r\n}\r\n","import { Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport default function ChatNotification({ username, type }) {\r\n    let usernameHtml = <Typography component=\"span\" color=\"primary\">{username}</Typography>;\r\n    let content;\r\n    switch (type) {\r\n        case 'welcome-current-user-notification':\r\n            content = 'Welcome to the chat room.';\r\n            break;\r\n        case 'welcome-other-user-notification':\r\n            content = <span>{usernameHtml} has joined the chat.</span>;\r\n            break;\r\n        case 'user-left-notification':\r\n            content = <span>{usernameHtml} has left the chat.</span>;\r\n            break;\r\n        default:\r\n            content = '';\r\n    }\r\n    return (\r\n        <Typography align=\"center\" className=\"text-muted\">{content}</Typography>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Box, List, Typography } from '@material-ui/core'\r\nimport Message from '../Message/Message'\r\nimport mainStyle from '../../defines/styles/MainStyles'\r\nimport { useSelector } from 'react-redux';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport ChatNotification from '../ChatNotification/ChatNotification';\r\nimport './Messages.css'\r\nimport { isNewChatEnable } from '../../features/NewChat/NewChatSlice';\r\n\r\nconst emptyHtml = (\r\n    <React.Fragment>\r\n        <Box mt={4}>\r\n            <Typography className=\"text-muted\" align=\"center\" >Let's start a conversation.</Typography>\r\n        </Box>\r\n    </React.Fragment>\r\n)\r\n\r\nconst scroll = () => {\r\n    let container = document.getElementById('my-messages-container');\r\n    container.scrollTop = container.scrollHeight;\r\n}\r\n\r\nexport default function Messages({ messages }) {\r\n    const classes = mainStyle();\r\n    const user = useSelector(authUser);\r\n    const newChatEnabled = useSelector(isNewChatEnable);\r\n\r\n    // messages\r\n    const messagesHtml = messages.map((item, index) => {\r\n        if (item.from) {\r\n            let notShowAvatar = false;\r\n            if (index < messages.length - 1) {\r\n                const nextItem = messages[index + 1];\r\n                notShowAvatar = (nextItem.type === 'message') ? nextItem.from.username === item.from.username : false;\r\n            }\r\n            return <Message notShowAvatar={notShowAvatar} ownMessage={item.from.username === user.username} key={index} user={item.from} message={item.text} time={item.time}></Message>\r\n        } else {\r\n            return <ChatNotification key={index} username={item.user.username} type={item.type}></ChatNotification>\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        scroll();\r\n    }, [messages])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <List className={`${classes.messageArea} custom-scrollbar`} id=\"my-messages-container\" >\r\n                {messagesHtml.length > 0 ? messagesHtml : (!newChatEnabled ? emptyHtml : null)}\r\n            </List>\r\n        </React.Fragment >\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Grid, TextField, Fab } from '@material-ui/core'\r\nimport { Send as SendIcon } from '@material-ui/icons'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setNotify } from '../../features/notify/NotifySlice';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport { conversation } from '../../features/chat/ChatSlice';\r\nimport Message from '../../defines/Message';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { isNewChatEnable, newChatReceivers } from '../../features/NewChat/NewChatSlice';\r\nimport Helper from '../../defines/Helper';\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\n\r\nlet myTimeoutObj;\r\nexport default function SendingInput() {\r\n    const [inputMsg, setInputMsg] = useState('');\r\n    const [isTyping, setTyping] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const user = useSelector(authUser);\r\n    const convo = useSelector(conversation);\r\n    const receivers = useSelector(newChatReceivers);\r\n    const newChatEnabled = useSelector(isNewChatEnable);\r\n\r\n    // INPUT CHANGE\r\n    const onInputChange = (e) => {\r\n        setInputMsg(e.target.value);\r\n    }\r\n\r\n    // ON SENDING MESSAGE\r\n    const onSendingMessageClick = (e) => {\r\n        e.preventDefault();\r\n        if (convo._id) {\r\n            onSendingMessage();\r\n        } else {\r\n            if (newChatEnabled && receivers.length > 0) {\r\n                onCreateConversationsWithReceicersAndFristMessage();\r\n            } else {\r\n                alert('nothing');\r\n            }\r\n        }\r\n    }\r\n\r\n    const onSendingMessage = () => {\r\n        if (inputMsg.trim() === '') {\r\n            // INVALID\r\n            dispatch(setNotify({ message: Message.PleaseTypeMessage, open: true, timeout: 2000 }));\r\n        } else {\r\n            //MySocket.emitSendMessage(user, inputMsg);\r\n            MySocket.emitSendMessage(user, inputMsg, convo._id);\r\n            setInputMsg('');\r\n        }\r\n        if (newChatEnabled) history.push(`/chat/t/${convo._id}`)\r\n    }\r\n\r\n    const onCreateConversationsWithReceicersAndFristMessage = async () => {\r\n        const receiverIds = Helper.getArrayOfFieldValue(receivers, '_id').concat(user._id);\r\n        const data = await ConversationApi.createConversationWithMemberIds(receiverIds);\r\n        const { status, payload } = data;\r\n        if (status === 'succeeded') {\r\n            MySocket.emitJoinUsersToConversation(payload.members, payload._id);\r\n            MySocket.emitSendMessage(user, inputMsg, payload._id);\r\n            setInputMsg('');\r\n            history.push(`/chat/t/${payload._id}`);\r\n        }\r\n    }\r\n\r\n    const emitTyping = () => {\r\n        if (!isTyping && inputMsg.trim() !== '') MySocket.emitTyping(user, convo._id);\r\n        setTyping(true);\r\n        clearTimeout(myTimeoutObj);\r\n        myTimeoutObj = setTimeout(() => {\r\n            emitStopTyping();\r\n        }, 2000);\r\n    }\r\n\r\n    const emitStopTyping = () => {\r\n        if (isTyping) {\r\n            MySocket.emitStopTyping(user.username, convo._id);\r\n            setTyping(false);\r\n        }\r\n    }\r\n\r\n    // SOLVE TYPING\r\n    const onKeyUp = (e) => {\r\n        if (e.which !== 13) {\r\n            if (inputMsg.length > 3) emitTyping();\r\n        } else {\r\n            emitStopTyping();\r\n        }\r\n    }\r\n\r\n    const onBlur = () => {\r\n        emitStopTyping();\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(e) => { onSendingMessageClick(e) }}>\r\n            <Grid container style={{ padding: '20px' }}>\r\n                <Grid item xs={10} md={11}>\r\n                    <TextField\r\n                        autoFocus={true}\r\n                        inputProps={{\r\n                            autoComplete: 'off'\r\n                        }}\r\n                        value={inputMsg} id=\"outlined-basic-email\" fullWidth onChange={onInputChange} onKeyUp={onKeyUp} onBlur={onBlur} />\r\n                </Grid>\r\n                <Grid item xs={2} md={1} align=\"center\">\r\n                    <Fab color=\"primary\" aria-label=\"add\" onClick={onSendingMessage}><SendIcon /></Fab>\r\n                </Grid>\r\n            </Grid>\r\n        </form >\r\n    )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    message: '',\r\n    type: '',\r\n    open: false,\r\n    timeout: 4000,\r\n}\r\n\r\nconst NotifySlice = createSlice({\r\n    name: 'notify',\r\n    initialState,\r\n    reducers: {\r\n        setNotify: (state, action) => {\r\n            const { message, type, open, timeout } = action.payload;\r\n            if (open) {\r\n                state.message = message || '';\r\n                state.type = type || '';\r\n                state.timeout = timeout || 6000;\r\n            }\r\n            state.open = open || false;\r\n        }\r\n    }\r\n})\r\n\r\nconst selectors = {\r\n    open: (state) => {\r\n        return state.notify.open;\r\n    },\r\n    message: (state) => {\r\n        return state.notify.message;\r\n    },\r\n    type: (state) => {\r\n        return state.notify.type;\r\n    },\r\n    timeout: (state) => {\r\n        return state.notify.timeout;\r\n    },\r\n};\r\nexport const { open, message, type, timeout } = selectors;\r\n\r\nexport const {\r\n    setNotify\r\n} = NotifySlice.actions\r\nexport default NotifySlice.reducer;","const Message = {\r\n    // form\r\n    invalid: `{0} invalid`,\r\n\r\n    // system\r\n    fail: `Something went wrong`,\r\n    welcomeNewAccount: `Hello {0}, let's start a chat with your fiends!`,\r\n    PleaseTypeMessage: `Please type some message to send!`,\r\n    newMessage: `{0}: {1}`,\r\n\r\n    // friend\r\n    friendRequested: `{0} sent you a friend request.`,\r\n    unfriended: `{0} unfriended you.`,\r\n    friendAccepted: `{0} accepted your friend request.`,\r\n\r\n\r\n}\r\nexport default Message;","import React from 'react'\r\nimport SendingInput from '../SendingInput/SendingInput'\r\n\r\nexport default function SendMessageBar({type}) {\r\n    return (\r\n        <React.Fragment>\r\n            <SendingInput type={type}></SendingInput>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import { Paper } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport MySocket from '../../defines/Socket/MySocket'\r\nimport Socket from '../../defines/Socket'\r\nimport MyAvatar from '../MyAvatar/MyAvatar';\r\nimport SocketEventName from '../../defines/Socket/SocketEventName';\r\n\r\nexport default function UserTyping() {\r\n    const [typingUsers, setTypingUsers] = useState([]);\r\n    useEffect(() => {\r\n        MySocket.onTyping((data) => {\r\n            setTypingUsers(typingUsers.concat(data.user));\r\n        })\r\n        MySocket.onStopTyping((data) => {\r\n            setTypingUsers(typingUsers.filter((user) => {\r\n                return user.username !== data.username;\r\n            }));\r\n        })\r\n        return () => {\r\n            Socket.off(SocketEventName.typing);\r\n            Socket.off(SocketEventName.stopTyping);\r\n        }\r\n    })\r\n\r\n    const typingHtml = typingUsers.map((user) => {\r\n        return (\r\n            <div key={user._id}>\r\n                <div style={{ display: 'flex', alignItems: 'flex-start', }}>\r\n                    <span>\r\n                        <MyAvatar name={user.username} picture={user.picture}> </MyAvatar>\r\n                    </span>\r\n                    <img className=\"typing-icon\" src={`${process.env.PUBLIC_URL}/images/icons/typing-icon.gif`} alt=\"typing\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <Paper elevation={0} style={{ minWidth: '200px' }}>\r\n            {(typingHtml.length > 0 ? typingHtml : null)}\r\n        </Paper>\r\n    )\r\n}\r\n","import { Divider } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\nimport Socket from '../../defines/Socket';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport SocketEventName from '../../defines/Socket/SocketEventName';\r\nimport { authUser, authUserId } from '../../features/auth/authSlice';\r\nimport { appendMessage, conversation, conversationError, conversationMessages, conversationStatus, fetchConversationById, fetchConversationByMemberIds, fetchHomeConversation, reset } from '../../features/chat/ChatSlice';\r\nimport { isNewChatEnable, newChatReceiver } from '../../features/NewChat/NewChatSlice';\r\nimport { updateLastMessage } from '../../features/sidebarConversations/SidebarConversationsSlice';\r\nimport Loading from '../Loading/Loading';\r\nimport Messages from '../Messages/Messages';\r\nimport SendMessageBar from '../SendMessageBar/SendMessageBar';\r\nimport UserTyping from '../UserTyping/UserTyping';\r\n\r\nexport default function NormalChat() {\r\n    const status = useSelector(conversationStatus);\r\n    const messages = useSelector(conversationMessages);\r\n    const convo = useSelector(conversation);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const loggedUserId = useSelector(authUserId);\r\n    const { conversationId } = useParams();;\r\n    const receiver = useSelector(newChatReceiver) || {};\r\n    const newChatEnabled = useSelector(isNewChatEnable);\r\n\r\n    // FETCH CONVERSATION BY FRIEND ID\r\n    useEffect(() => {\r\n        if (newChatEnabled) {\r\n            if (receiver._id) dispatch(fetchConversationByMemberIds([`${loggedUserId}`, `${receiver._id}`]));\r\n            else {\r\n                dispatch(reset());\r\n            }\r\n        }\r\n    }, [receiver._id, newChatEnabled])\r\n\r\n    useEffect(() => {\r\n        if (status === 'succeeded') {\r\n            if (convo._id) MySocket.emitJoinRoom(`${convo._id}_current`);\r\n            else history.replace('/chat/new');\r\n        }\r\n        return () => {\r\n            if (convo._id) MySocket.emitLeaveRoom(`${convo._id}_current`);\r\n        }\r\n    }, [status, convo._id])\r\n\r\n    // FETCH CONVERSATION BY ID\r\n    useEffect(() => {\r\n        if (conversationId) dispatch(fetchConversationById(conversationId))\r\n    }, [conversationId]);\r\n\r\n    // reset\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(reset())\r\n        }\r\n    }, [])\r\n\r\n    // SOCKET EVENTS RECEIVE MESSAGE\r\n    useEffect(() => {\r\n        MySocket.onReceiveMessage((data) => {\r\n            const { conversationId, message } = data;\r\n            if (conversationId === convo._id) {\r\n                const messageObj = {\r\n                    type: 'message',\r\n                    ...message\r\n                }\r\n                dispatch(appendMessage(messageObj));\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            MySocket.off(SocketEventName.receiveMessage);\r\n        }\r\n    }, [messages, convo._id])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {status === 'loading'\r\n                ? <Loading></Loading>\r\n                : <Messages messages={messages}></Messages>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import { Avatar, Box, IconButton, ListItemText, TextField, Typography } from '@material-ui/core';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport UserApi from '../../defines/https/UserApi'\r\nimport Helper from '../../defines/Helper'\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport './Receiver.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authUserId } from '../../features/auth/authSlice';\r\nimport SuggestionUsers from '../SuggestionUsers/SuggestionUsers';\r\nimport { removeLastNewChatReceiver, newChatReceivers, removeNewChatReceiverById, appendNewChatReceiver } from '../../features/NewChat/NewChatSlice';\r\n\r\nlet timeout;\r\n\r\nconst SelectedUsers = ({ items, onCloseClick }) => {\r\n    return items.map((item) => {\r\n        return (\r\n            <Alert\r\n                key={item._id}\r\n                className=\"selected-receiver\"\r\n                severity=\"info\"\r\n                icon={false}\r\n                action={\r\n                    <IconButton\r\n                        aria-label=\"close\"\r\n                        color=\"inherit\"\r\n                        size=\"small\"\r\n                        onClick={() => { onCloseClick(item) }} >\r\n                        <CloseIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                }\r\n            > {item.username}</Alert>\r\n        )\r\n    })\r\n}\r\n\r\nexport default function Receiver({ onFriendIdSelected }) {\r\n    const dispatch = useDispatch();\r\n    const [mounted, setMounted] = useState(true);\r\n    const [suggestionUsers, setSuggestionUsers] = useState([]);\r\n    const [inputVal, setInputVal] = useState('');\r\n    const [receiverName, setReceiverName] = useState('');\r\n    const inputRef = useRef(null);\r\n    const loggedUserId = useSelector(authUserId)\r\n    const receivers = useSelector(newChatReceivers);\r\n\r\n    // fetch suggestion users\r\n    useEffect(() => {\r\n        setMounted(true);\r\n        const fetchUsers = async () => {\r\n            const data = await UserApi.findReceivers(receiverName, Helper.getArrayOfFieldValue(receivers, '_id').concat(loggedUserId));\r\n            const { status, payload } = data;\r\n            if (status === 'succeeded') {\r\n                if (mounted) {\r\n                    setSuggestionUsers(payload);\r\n                }\r\n            }\r\n        }\r\n        if (receiverName.trim() !== '') fetchUsers();\r\n        return () => {\r\n            setMounted(false);\r\n        }\r\n    }, [receiverName, receivers, loggedUserId])\r\n\r\n    useEffect(() => {\r\n        if (receivers.length === 1) onFriendIdSelected(receivers[0]._id);\r\n        else onFriendIdSelected(null);\r\n    }, [receivers])\r\n\r\n    // suggestion users\r\n    const onSuggestionUserClick = (item) => {\r\n        dispatch(appendNewChatReceiver(item));\r\n        setInputVal('');\r\n        setReceiverName('');\r\n        setSuggestionUsers([])\r\n        const input = inputRef.current.querySelector('input');\r\n        input.focus();\r\n    }\r\n\r\n    // selected users\r\n    const onRemoveSelectedUser = (item) => {\r\n        dispatch(removeNewChatReceiverById(item._id));\r\n    }\r\n\r\n    const solveSelectedUsers = (e, oldVal, newVal) => {\r\n        if (e.which === 8 && oldVal.trim() === '' && newVal.trim() === '') {\r\n            // pop\r\n            dispatch(removeLastNewChatReceiver());\r\n        }\r\n    }\r\n\r\n    // input events\r\n    const onInputChange = (e) => {\r\n        const value = e.target.value;\r\n        setInputVal(value);\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => {\r\n            setReceiverName(value);\r\n        }, 500);\r\n    }\r\n\r\n    const onInputKeyup = (e) => {\r\n        const value = e.target.value;\r\n        solveSelectedUsers(e, inputVal, value);\r\n    }\r\n\r\n    const onInputBlur = (e) => {\r\n        const value = e.target.value;\r\n        solveSelectedUsers(e, inputVal, value);\r\n    }\r\n\r\n    // render\r\n    return (\r\n        <Box className=\"receiver-wrapper\">\r\n            <Typography className=\"receiver-label\" >To: </Typography>\r\n            <Box className=\"receiver-container\" display=\"inline-block\" >\r\n                <SelectedUsers items={receivers} onCloseClick={onRemoveSelectedUser}></SelectedUsers>\r\n                <Box className=\"receiver-input-container\">\r\n                    {/* input */}\r\n                    <TextField placeholder=\"Receiver\" ref={inputRef} className=\"receiver-input\" autoFocus={true} onKeyUp={onInputKeyup} onChange={onInputChange} onBlur={onInputBlur} value={inputVal} />\r\n                    {/* LIST */}\r\n                    {(suggestionUsers.length > 0) ? (\r\n                        <SuggestionUsers items={suggestionUsers} onItemClick={onSuggestionUserClick}></SuggestionUsers>\r\n                    ) : null}\r\n                    {/* END LIST */}\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}","import { Avatar, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './SuggestionUsers.css'\r\n\r\nexport default function SuggestionUsers({ items = [], onItemClick }) {\r\n\r\n    function generateSuggestionUsers(items) {\r\n        return items.map((item) => {\r\n            return (\r\n                <ListItem button key={item._id} onClick={() => { onItemClick(item) }}>\r\n                    <ListItemAvatar>\r\n                        <Avatar src={item.picture}> </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        primary={item.username}\r\n                        secondary={false ? 'Secondary text' : null}\r\n                    />\r\n                </ListItem>\r\n            )\r\n        })\r\n    }\r\n    return (\r\n        <List className=\"suggestion-receiver-list\" dense={false} >\r\n            {generateSuggestionUsers(items)}\r\n        </List>\r\n    )\r\n}\r\n","import { Box, Paper, Typography } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { resetNewChat, setNewChatEnabled } from '../../features/NewChat/NewChatSlice';\r\nimport NormalChat from '../NormalChat/NormalChat';\r\nimport Receiver from '../Receiver/Receiver';\r\n\r\nexport default function NewChat() {\r\n    const [friendId, setFriendId] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const onFriendIdSelected = (id) => {\r\n        setFriendId(id);\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(setNewChatEnabled(true));\r\n        return () => {\r\n            dispatch(resetNewChat());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Box position=\"relative\">\r\n            {/* INPUT */}\r\n            <Paper style={{ position: 'absolute', zIndex: '1000', width: '100%', boxShadow: 'none' }}>\r\n                <Receiver onFriendIdSelected={onFriendIdSelected}></Receiver>\r\n            </Paper>\r\n\r\n            {/* CHAT AREA */}\r\n            <Box>\r\n                <NormalChat friendId={friendId} type=\"temp\"></NormalChat>\r\n            </Box>\r\n        </Box >\r\n    )\r\n}\r\n","import { Box, Divider } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { conversationStatus } from '../../features/chat/ChatSlice';\r\nimport NewChat from '../NewChat/NewChat';\r\nimport NormalChat from '../NormalChat/NormalChat';\r\nimport SendMessageBar from '../SendMessageBar/SendMessageBar';\r\nimport UserTyping from '../UserTyping/UserTyping';\r\n\r\n\r\nexport default function ChatBox({ children }) {\r\n    const [loaded] = useState(true);\r\n    const params = useParams();\r\n    const history = useHistory();\r\n    const [display, setDisplay] = useState(null);\r\n    const convoStatus = useSelector(conversationStatus);\r\n\r\n    useEffect(() => {\r\n        const { type, conversationId } = params;\r\n        if (type) {\r\n            switch (type) {\r\n                case 't':\r\n                    if (!conversationId) history.replace('/chat');\r\n                    setDisplay('chat');\r\n                    break;\r\n                case 'new':\r\n                    if (conversationId) history.replace('/chat/new');\r\n                    setDisplay('new');\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            //home chat\r\n            setDisplay('chat');\r\n\r\n        }\r\n        return () => {\r\n        }\r\n    }, [params])\r\n\r\n    const mainHtml = (\r\n        <React.Fragment >\r\n            <div style={{ position: 'relative', }}>\r\n                {\r\n                    display === 'chat'\r\n                        ?\r\n                        <NormalChat></NormalChat>\r\n                        : <NewChat></NewChat>\r\n                }\r\n                <div style={{ position: 'absolute', bottom: '100px', left: '5px', width: '100%' }}>\r\n                    <UserTyping></UserTyping>\r\n                    <Divider />\r\n                </div>\r\n                <Box display={convoStatus === 'loading' ? 'none' : 'unset'}>\r\n                    <SendMessageBar></SendMessageBar>\r\n                </Box>\r\n            </div>\r\n        </React.Fragment >\r\n    )\r\n\r\n    return (\r\n        <React.Fragment> { loaded ? mainHtml : children} </React.Fragment>\r\n    )\r\n}\r\n","import { Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport default function AppTitle({ title }) {\r\n    return (\r\n        <Typography variant=\"h5\">{title}</Typography>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport MyAvatar from '../MyAvatar/MyAvatar';\r\nimport Socket from '../../defines/Socket';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport { Hidden, Typography } from '@material-ui/core';\r\nimport SocketEventName from '../../defines/Socket/SocketEventName';\r\nimport AppTitle from '../AppTitle/AppTitle';\r\nimport { conversationId, fetchConversationByUserIdsOrCreateIfNotExist, conversationMemberIds } from '../../features/chat/ChatSlice';\r\nimport ConversationApi from '../../defines/https/ConversationApi';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Helper from '../../defines/Helper';\r\nimport ConversationLink from '../ConversationLink/ConversationLink';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nexport default function OnlineUsers({ item }) {\r\n    const classes = useStyles();\r\n    const [onlineUsers, setOnlineUsers] = useState([]);\r\n    const [isShow, setShow] = useState(false);\r\n    const user = useSelector(authUser) || {};\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setShow(true);\r\n        }, 500);\r\n        MySocket.emitGetOnlineUsers();\r\n        MySocket.onOnlineUsers((data) => {\r\n            setOnlineUsers(data)\r\n        })\r\n        return () => {\r\n            Socket.off(SocketEventName.onlineUsers);\r\n        }\r\n    }, [])\r\n\r\n    const onlineUsersHtml = onlineUsers.filter((item) => {\r\n        return (item.username !== user.username)\r\n    }).map((item) => {\r\n        return (\r\n            <ConversationLink key={item._id} button component={ListItem} item={item}>\r\n                <ListItemAvatar >\r\n                    <MyAvatar online={true} name={item.name} single={item.single} picture={item.picture}></MyAvatar>\r\n                </ListItemAvatar>\r\n                <Hidden smDown>\r\n                    <ListItemText\r\n                        primary={item.username}\r\n                    />\r\n                </Hidden>\r\n            </ConversationLink>\r\n        )\r\n    })\r\n\r\n    const emptyHtml = (\r\n        <Typography className=\"text-muted\" align=\"center\" >No online users</Typography>\r\n    )\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <AppTitle title=\"Online\"></AppTitle>\r\n            <List className={classes.root}>\r\n                {\r\n                    isShow\r\n                        ? (onlineUsersHtml.length > 0 ? onlineUsersHtml : emptyHtml)\r\n                        : null\r\n                }\r\n            </List >\r\n        </React.Fragment>\r\n    );\r\n}","import React, { useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { useEffect } from 'react'\r\nimport Slt from '../../defines/Slt'\r\nimport ConversationList from '../../components/ConversationList/ConversationList'\r\nimport ChatBox from '../../components/ChatBox/ChatBox'\r\nimport OnlineUsers from '../../components/OnlineUser/OnlineUsers'\r\nimport useStyles from '../../defines/styles/MainStyles'\r\nimport { Box, Hidden } from '@material-ui/core'\r\n\r\nexport default function Chat() {\r\n    const classes = useStyles();\r\n    const [appBarHeight,\r\n        setAppBarHeight] = useState(0);\r\n\r\n    // HANDLE HEIGHT\r\n    const heightStyle = {\r\n        height: `calc(100vh - ${appBarHeight}px)`\r\n    }\r\n\r\n    const handleAppBarResize = () => {\r\n        let height = document\r\n            .getElementById(Slt.mainAppBar)\r\n            .clientHeight;\r\n        setAppBarHeight(height);\r\n    }\r\n\r\n    // HANDLE APP BAR RESIZE\r\n    useEffect(() => {\r\n        //handleAppBarResize();\r\n        //window.addEventListener('resize', handleAppBarResize)\r\n    }, []);\r\n\r\n    // DISPLAY LATEST CONVERSATION\r\n\r\n    return (\r\n        <Box p={2}>\r\n            <Grid container >\r\n                <Grid container item xs={12} spacing={2}>\r\n                    <Grid item xs={4} md={3} className={`${classes.borderRight500}`} >\r\n                        <ConversationList></ConversationList>\r\n                    </Grid>\r\n                    <Grid item xs={8} md={7}>\r\n                        <ChatBox>\r\n                            Loading...\r\n                    </ChatBox>\r\n                    </Grid>\r\n                    <Grid item xs={false} md={2} className={`${classes.borderLeft500} `}>\r\n                        <OnlineUsers />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n","const FormErrors = {\r\n    required: '{0} required',\r\n    lengthGreater: '{0} must greater than {1} characters',\r\n    noSpecialCharacter: '{0} must not contain special characters',\r\n    unique: '{0} must be unique',\r\n    match: '{0} must match',\r\n}\r\nexport default FormErrors;","import React, { useState, } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setNotify } from '../../features/notify/NotifySlice';\r\nimport { isLogged, loginThunk, status, authError } from '../../features/auth/authSlice';\r\nimport { useCookies } from 'react-cookie';\r\nimport Helper from '../../defines/Helper'\r\nimport { LOGGED_USER } from '../../defines/CookieName';\r\nimport Message from '../../defines/Message';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { Box } from '@material-ui/core';\r\nimport FormErrors from '../../defines/configs/FormErrors';\r\nimport RouterLink from '../RouterLink/RouterLink';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    }\r\n}));\r\n\r\nexport default function SignIn() {\r\n    const dispatch = useDispatch();\r\n    const [isSubmitClicked, setSubmitClicked] = useState(false);\r\n\r\n    // SELECTOR\r\n    const logged = useSelector(isLogged);\r\n    const [cookies, setCookie] = useCookies([LOGGED_USER]);\r\n\r\n    const authStatus = useSelector(status);\r\n    const authErr = useSelector(authError);\r\n\r\n    const classes = useStyles();\r\n    if (isSubmitClicked) {\r\n        if (authStatus === 'succeeded' && authErr)\r\n            dispatch(setNotify({ message: 'Login unsuccessfully', type: 'error', open: true }))\r\n    } else {\r\n        if (authStatus === 'loading') return null;\r\n    }\r\n\r\n    const mainHtml = (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                    </Typography>\r\n\r\n                {/* FORMIK */}\r\n                <Formik\r\n                    initialValues={{\r\n                        username: '',\r\n                        password: '',\r\n                        passwordConfirmation: ''\r\n                    }}\r\n                    validationSchema={yup.object({\r\n                        username: yup.string().required(Helper.format(FormErrors.required, 'Username')),\r\n                        password: yup.string().required(Helper.format(FormErrors.required, 'Password')),\r\n                    })}\r\n                    onSubmit={async (values, { setSubmitting }) => {\r\n                        const { username, password } = values;\r\n                        let user = {\r\n                            username,\r\n                            password\r\n                        };\r\n                        setSubmitClicked(true);\r\n                        dispatch(loginThunk(user));\r\n                        setCookie(LOGGED_USER, user);\r\n                        //alert(JSON.stringify(values));\r\n                    }}>\r\n                    {({\r\n                        values,\r\n                        errors,\r\n                        touched,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                        isSubmitting,\r\n                        isValid,\r\n                        dirty,\r\n                        /* and other goodies */\r\n                    }) => {\r\n                        const showErrors = {};\r\n                        for (let key in errors) {\r\n                            showErrors[key] = (errors[key] != null) && touched[key];\r\n                        }\r\n                        const props = (field, label) => {\r\n                            label = label || Helper.ucFirst(field);\r\n                            return {\r\n                                fullWidth: true,\r\n                                margin: 'normal',\r\n                                placeholder: label,\r\n                                variant: 'outlined',\r\n                                name: field,\r\n                                onChange: handleChange,\r\n                                onBlur: handleBlur,\r\n                                value: values[label],\r\n                                label: label,\r\n                                error: (showErrors[field]),\r\n                                helperText: (showErrors[field])\r\n                                    ? errors[field]\r\n                                    : null\r\n                            }\r\n                        }\r\n                        return (\r\n                            <form onSubmit={handleSubmit} noValidate autoComplete=\"off\">\r\n                                <TextField autoFocus={true} type=\"text\" {...props('username')} />\r\n                                <TextField type=\"password\" {...props('password')} />\r\n                                <RouterLink to=\"/sign-up\">\r\n                                    <Typography color=\"primary\" >\r\n                                        Create an account\r\n                                        </Typography>\r\n                                </RouterLink>\r\n                                <Box mt={2}>\r\n                                    <Button\r\n                                        disabled={isSubmitting || !isValid || !dirty}\r\n                                        type=\"submit\"\r\n                                        fullWidth\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                    > Sign In\r\n                                    </Button>\r\n                                </Box>\r\n                            </form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n                {/* END FORMIK */}\r\n\r\n            </div>\r\n        </Container>\r\n    )\r\n\r\n    return (!logged ? mainHtml : (null));\r\n}\r\n","import * as yup from 'yup';\r\nimport FormErrors from '../configs/FormErrors';\r\nimport Helper from '../Helper';\r\nimport UserApi from '../https/UserApi';\r\n\r\nconst isUsernameExist = async username => {\r\n    if (username) {\r\n        const data = await UserApi.findByUsername(username);\r\n        return (data.status === 'succeeded');\r\n    }\r\n    return false;\r\n}\r\n\r\n// length\r\nconst isLengthValid = (value, length) => {\r\n    if (value) {\r\n        return (value.length >= length)\r\n    }\r\n    return false;\r\n}\r\n\r\n// contain special characters\r\nconst noSpecialCharacters = (value) => {\r\n    if (value) {\r\n        return (/^[a-zA-Z0-9]+$/.test(value));\r\n    }\r\n    return false;\r\n}\r\n\r\nconst UserValidates = {\r\n    username: function (username, setUsername, timeoutObj) {\r\n        const label = 'Username';\r\n        return yup\r\n            .string()\r\n            .required(Helper.format(FormErrors.required, label))\r\n            .test('length', Helper.format(FormErrors.lengthGreater, label, 4), (value, context) => {\r\n                return (isLengthValid(value, 4));\r\n            })\r\n            .test('specialCharacter', Helper.format(FormErrors.noSpecialCharacter, label), (value, context) => {\r\n                return (noSpecialCharacters(value));\r\n            })\r\n            .test('usernameExist', Helper.format(FormErrors.unique, label), async (value, context) => {\r\n                if (isLengthValid(value, 4) && noSpecialCharacters(value)) {\r\n                    if (value !== username.value) {\r\n                        clearTimeout(timeoutObj);\r\n                        if (!value) return true;\r\n                        return new Promise((resolve, reject) => {\r\n                            timeoutObj = setTimeout(async () => {\r\n                                const isExist = await isUsernameExist(value);\r\n                                setUsername({ value, unique: !isExist });\r\n                                resolve(!isExist);\r\n                            }, 500);\r\n                        });\r\n                    }\r\n                }\r\n                return username.unique;\r\n            });\r\n\r\n    },\r\n    password: function () {\r\n        const label = 'Password';\r\n        return yup\r\n            .string()\r\n            .required(Helper.format(FormErrors.required, label))\r\n            .matches(/[a-zA-Z0-9]{3,}/, Helper.format(FormErrors.lengthGreater, label));\r\n    },\r\n    passwordConfirmation: function () {\r\n        const label = 'Password confirmation';\r\n        return yup\r\n            .string()\r\n            .required(Helper.format(FormErrors.required, label))\r\n            .oneOf([yup.ref('password')], Helper.format(FormErrors.match, label));\r\n    }\r\n}\r\n\r\nexport default UserValidates;\r\n","import React, { useState,} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setNotify } from '../../features/notify/NotifySlice';\r\nimport { isLogged, login, status } from '../../features/auth/authSlice';\r\nimport Helper from '../../defines/Helper'\r\nimport { Formik } from 'formik';\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport * as yup from 'yup';\r\nimport UserValidates from '../../defines/validates/UserValidates';\r\nimport Message from '../../defines/Message';\r\nimport { Box } from '@material-ui/core';\r\nimport RouterLink from '../RouterLink/RouterLink';\r\n\r\nlet timeoutObj;\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1)\r\n    },\r\n}));\r\n\r\nexport default function SignUp() {\r\n    const dispatch = useDispatch();\r\n    const [username, setUsername] = useState({ value: '', unique: false });\r\n\r\n    // SELECTOR\r\n    const logged = useSelector(isLogged);\r\n    const authStatus = useSelector(status);\r\n    const classes = useStyles();\r\n\r\n    if (authStatus === 'loading')\r\n        return null;\r\n\r\n    return (!logged\r\n        ? (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">Sign Up</Typography>\r\n                    <Formik\r\n                        initialValues={{\r\n                            username: '',\r\n                            password: '',\r\n                            passwordConfirmation: ''\r\n                        }}\r\n                        validationSchema={yup.object({\r\n                            username: UserValidates.username(username, setUsername, timeoutObj),\r\n                            password: UserValidates.password(),\r\n                            passwordConfirmation: UserValidates.passwordConfirmation(),\r\n                        })}\r\n                        onSubmit={async (values, { setSubmitting }) => {\r\n                            const { username, password } = values;\r\n                            let data = await UserApi.createAccount(username, password);\r\n                            if (data.status === 'succeeded') {\r\n                                const user = data.payload;\r\n                                dispatch(setNotify({ message: Helper.format(Message.welcomeNewAccount, user.username) }));\r\n                                dispatch(login(user));\r\n                            } else {\r\n                                setSubmitting(false);\r\n                            }\r\n                        }}>\r\n                        {({\r\n                            values,\r\n                            errors,\r\n                            touched,\r\n                            handleChange,\r\n                            handleBlur,\r\n                            handleSubmit,\r\n                            isSubmitting,\r\n                            isValid,\r\n                            dirty\r\n                            /* and other goodies */\r\n                        }) => {\r\n                            const showErrors = {};\r\n                            for (let key in errors) {\r\n                                showErrors[key] = (errors[key] != null) && touched[key];\r\n                            }\r\n                            const props = (field, label) => {\r\n                                label = label || Helper.ucFirst(field);\r\n                                return {\r\n                                    fullWidth: true,\r\n                                    margin: 'normal',\r\n                                    placeholder: label,\r\n                                    variant: 'outlined',\r\n                                    name: field,\r\n                                    onChange: handleChange,\r\n                                    onBlur: handleBlur,\r\n                                    value: values[label],\r\n                                    label: label,\r\n                                    error: (showErrors[field]),\r\n                                    helperText: (showErrors[field])\r\n                                        ? errors[field]\r\n                                        : null\r\n                                }\r\n                            }\r\n                            return (\r\n                                <form onSubmit={handleSubmit} noValidate autoComplete=\"off\">\r\n                                    <TextField type=\"text\" {...props('username')} />\r\n                                    <TextField type=\"password\" {...props('password')} />\r\n                                    <TextField type=\"password\" {...props('passwordConfirmation', 'Password confirmation')} />\r\n                                    <RouterLink to=\"/signin\">\r\n                                        <Typography color=\"primary\" >\r\n                                            Have an account?\r\n                                        </Typography>\r\n                                    </RouterLink>\r\n                                    <Box mt={2}\r\n                                    >\r\n                                        <Button\r\n                                            disabled={isSubmitting || !isValid || !dirty}\r\n                                            type=\"submit\"\r\n                                            fullWidth\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                        > Sign Up </Button>\r\n                                    </Box>\r\n                                </form>\r\n                            )\r\n                        }}\r\n                    </Formik>\r\n                </div>\r\n            </Container >\r\n        )\r\n        : (null));\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { type, message, open, setNotify, timeout } from './NotifySlice';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2)\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function Notify() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const isOpen = useSelector(open);\r\n    const msg = useSelector(message);\r\n    const msgType = useSelector(type);\r\n    const duration = useSelector(timeout);\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setNotify({ open: false }));\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {(msg)\r\n                ? (\r\n\r\n                    <Snackbar\r\n                        open={isOpen}\r\n                        autoHideDuration={duration}\r\n                        onClose={handleClose}\r\n                        anchorOrigin={{\r\n                            horizontal: 'right',\r\n                            vertical: 'top'\r\n                        }}\r\n                        message={msg}>\r\n                        {(msgType !== '')\r\n                            ? (\r\n\r\n                                <Alert onClose={handleClose} severity={msgType}>\r\n                                    {msg}\r\n                                </Alert>\r\n                            )\r\n                            : null\r\n                        }\r\n                    </Snackbar>\r\n                )\r\n                : ''}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n    Route,\r\n    Redirect,\r\n} from \"react-router-dom\";\r\nimport { isLogged } from \"../../features/auth/authSlice\";\r\n\r\nexport default function PrivateRoute({ children, ...rest }) {\r\n    const logged = useSelector(isLogged);\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) => {\r\n                return logged ? (\r\n                    children\r\n                ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n            }\r\n            }\r\n        />\r\n    );\r\n}","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport {  useSelector } from 'react-redux';\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport mainStyles from '../../defines/styles/MainStyles'\r\nimport { authUser} from '../../features/auth/authSlice';\r\n\r\nexport default function SentRequestAction({ item }) {\r\n    const classes = mainStyles();\r\n    const user = useSelector(authUser);\r\n    const onCancelClick = async () => {\r\n        const data = await UserApi.cancelFriendRequest(user._id, item._id);\r\n        if (data.status === 'succeeded') {\r\n            MySocket.emitUpdateUserById(user._id);\r\n            MySocket.emitCancelFriendRequest(user, item._id);\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onCancelClick} variant=\"contained\" size=\"small\" className={classes.buttonStyle}>Cancel request</Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport Message from '../../defines/Message';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport mainStyles from '../../defines/styles/MainStyles'\r\nimport { authUser, updateUser } from '../../features/auth/authSlice';\r\n\r\nexport default function SentRequestAction({ item }) {\r\n    const classes = mainStyles();\r\n    const user = useSelector(authUser);\r\n    const onConfirmClick = async () => {\r\n        const data = await UserApi.confirmFriendRequest(user._id, item._id);\r\n        if (data.status === 'succeeded') {\r\n            MySocket.emitUpdateUserById(user._id);\r\n            MySocket.emitAcceptFriend(user, item._id);\r\n        }\r\n    }\r\n\r\n    const onDeleteClick = async () => {\r\n        const data = await UserApi.deleteFriendRequest(user._id, item._id);\r\n        if (data.status === 'succeeded') {\r\n            MySocket.emitUpdateUserById(user._id);\r\n            MySocket.emitDeleteFriendRequest(user, item._id);\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onConfirmClick} color=\"primary\" variant=\"contained\" size=\"small\" className={classes.buttonStyle}>Confirm</Button>\r\n            <Button onClick={onDeleteClick} variant=\"contained\" size=\"small\" className={classes.buttonStyle}>Delete</Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport Message from '../../defines/Message';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport mainStyles from '../../defines/styles/MainStyles'\r\nimport { authUser, updateUser } from '../../features/auth/authSlice';\r\n\r\nexport default function SentRequestAction({ item }) {\r\n    const classes = mainStyles();\r\n    const user = useSelector(authUser);\r\n    const onAddFriend = async () => {\r\n        const data = await UserApi.sentFriendRequest(user._id, item._id);\r\n        if (data.status === 'succeeded') {\r\n            MySocket.emitUpdateUserById(user._id);\r\n            MySocket.emitAddFriend(user, item._id);\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Button onClick={onAddFriend} color=\"primary\" variant=\"contained\" size=\"small\" className={classes.buttonStyle}>Add friend</Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { Button } from '@material-ui/core';\r\nimport mainStyles from '../../defines/styles/MainStyles'\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport { useSelector } from 'react-redux';\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport MySocket from '../../defines/Socket/MySocket';\r\nimport ConversationLink from '../ConversationLink/ConversationLink';\r\n\r\nconst ITEM_HEIGHT = 48;\r\n\r\nexport default function SentRequestAction({ item }) {\r\n\r\n    const user = useSelector(authUser);\r\n    const classes = mainStyles();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    // click\r\n    const onUnfriend = async () => {\r\n        const data = await UserApi.unfriend(user._id, item._id);\r\n        if (data.status === 'succeeded') {\r\n            MySocket.emitUpdateUserById(user._id);\r\n            MySocket.emitUnfriend(user, item._id);\r\n        }\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const onChat = () => {\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton\r\n                aria-label=\"more\"\r\n                aria-controls=\"long-menu\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n            >\r\n                <MoreVertIcon />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"long-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={open}\r\n                onClose={handleClose}\r\n                PaperProps={{\r\n                    style: {\r\n                        maxHeight: ITEM_HEIGHT * 4.5,\r\n                        width: '20ch',\r\n                    },\r\n                }}\r\n            >\r\n                <MenuItem>\r\n                    <ConversationLink item={item} style={{width: '100%'}}>\r\n                        <Button onClick={onChat} variant=\"contained\" size=\"small\" fullWidth color=\"primary\" className={classes.buttonStyle}>Chat</Button>\r\n                    </ConversationLink>\r\n                </MenuItem>\r\n                <MenuItem><Button onClick={onUnfriend} variant=\"contained\" size=\"small\" fullWidth className={classes.buttonStyle}>Unfriend</Button></MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n","import {\r\n    Card,\r\n    CardActions,\r\n    CardHeader,\r\n    Grid,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport React from 'react'\r\nimport { authUser } from '../../features/auth/authSlice';\r\nimport MyAvatar from '../MyAvatar/MyAvatar'\r\nimport SentRequestAction from '../FriendAction/SentRequestAction';\r\nimport RequestAction from '../FriendAction/RequestAction';\r\nimport StrangerAction from '../FriendAction/StrangerAction';\r\nimport FriendAction from '../FriendAction/FriendAction';\r\nimport { useSelector } from 'react-redux';\r\nimport Loading from '../Loading/Loading';\r\nconst getType = (user, friendId) => {\r\n    let { friend, request, sent_request } = user.friend;\r\n\r\n    let type;\r\n    if (friend.indexOf(friendId) > -1) {\r\n        type = 'friend';\r\n    } else if (request.indexOf(friendId) > -1) {\r\n        type = 'request';\r\n    } else if (sent_request.indexOf(friendId) > -1) {\r\n        type = 'sent_request';\r\n    } else type = 'stranger';\r\n\r\n    return type\r\n}\r\n\r\nexport default function FriendList({ items, type, isLoading }) {\r\n    const user = useSelector(authUser);\r\n    const itemsHtml = items.map((item, index) => {\r\n        let localType = type;\r\n        let action;\r\n        localType = type || getType(user, item._id);\r\n        if (localType === 'friend') {\r\n            action = <FriendAction item={item}></FriendAction>\r\n        } else if (localType === 'sent_request') {\r\n            action = <SentRequestAction item={item}></SentRequestAction>\r\n        } else if (localType === 'request') {\r\n            action = <RequestAction item={item}></RequestAction>\r\n        } else {\r\n            action = <StrangerAction item={item}></StrangerAction>\r\n        }\r\n        const actions = (\r\n            <CardActions style={{ justifyContent: 'flex-end' }}> {action} </CardActions>\r\n        )\r\n        return (\r\n            <Grid key={index} item xs={12} md={6} lg={4} >\r\n                <Card >\r\n                    <CardHeader\r\n                        avatar={< MyAvatar name={\r\n                            item.username\r\n                        }\r\n                            picture={\r\n                                item.picture\r\n                            } > </MyAvatar>}\r\n                        action={actions}\r\n                        title={item.username}\r\n                        subheader={null} />\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    const message = (\r\n        <React.Fragment>\r\n            <Grid item xs={12}>\r\n                {isLoading\r\n                    ? <Loading></Loading>\r\n                    : <Typography align=\"center\" className=\"text-muted\">Your list is empty</Typography>\r\n                }\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n    return (\r\n        <React.Fragment>{itemsHtml.length > 0 ? itemsHtml : message}</React.Fragment>\r\n    );\r\n}","import {\r\n    Card,\r\n    CardHeader,\r\n    Grid,\r\n    IconButton,\r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport UserApi from '../../defines/https/UserApi';\r\nimport { isLogged, authUser } from '../../features/auth/authSlice';\r\nimport MyAvatar from '../MyAvatar/MyAvatar'\r\nimport FriendList from '../FriendList/FriendList';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst AllFriendList = () => {\r\n    const [items,\r\n        setItems] = useState([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const user = useSelector(authUser);\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n            try {\r\n                const data = await UserApi.findUsersByIds(user.friend.friend);\r\n                if (data.status === 'succeeded')\r\n                    setItems(data.payload);\r\n                setLoading(false);\r\n            }\r\n            catch (e) { }\r\n        }\r\n        if (user.friend.friend.length > 0) {\r\n            fetchItems();\r\n        } else {\r\n            setItems([]);\r\n            setLoading(false);\r\n        }\r\n    }, [user.friend.friend])\r\n\r\n    return (\r\n        <FriendList items={items} type=\"friend\" isLoading={isLoading}></FriendList>\r\n    );\r\n}\r\n\r\nconst SentRequestList = () => {\r\n    const [items,\r\n        setItems] = useState([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const user = useSelector(authUser);\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n            try {\r\n                const data = await UserApi.findUsersByIds(user.friend.sent_request);\r\n                if (data.status === 'succeeded')\r\n                    setItems(data.payload);\r\n                setLoading(false);\r\n            }\r\n            catch (e) { }\r\n        }\r\n        if (user.friend.sent_request.length > 0) {\r\n            fetchItems();\r\n        } else {\r\n            setLoading(false);\r\n            setItems([]);\r\n        }\r\n    }, [user.friend.sent_request]);\r\n    return (\r\n        <FriendList items={items} type='sent_request' isLoading={isLoading}></FriendList>\r\n    )\r\n}\r\n\r\nconst RequestList = () => {\r\n    const [items,\r\n        setItems] = useState([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const user = useSelector(authUser);\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n            try {\r\n                const data = await UserApi.findUsersByIds(user.friend.request);\r\n                if (data.status === 'succeeded')\r\n                    setItems(data.payload);\r\n            }\r\n            catch (e) { }\r\n        }\r\n        if (user.friend.request.length > 0) {\r\n            fetchItems();\r\n        } else {\r\n            setItems([]);\r\n            setLoading(false);\r\n        }\r\n        setLoading(false);\r\n    }, [user.friend.request]);\r\n    return (\r\n        <FriendList items={items} type='request' isLoading={isLoading}></FriendList>\r\n    )\r\n}\r\n\r\nconst PeopleMayKnowList = ({ username }) => {\r\n    const [items,\r\n        setItems] = useState([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n            try {\r\n                const data = await UserApi.findStrangerByUsername(username);\r\n                if (data.status === 'succeeded')\r\n                    setItems(data.payload);\r\n                setLoading(false);\r\n            }\r\n            catch (e) { }\r\n        }\r\n        fetchItems();\r\n    }, [username]);\r\n    return (\r\n        <FriendList items={items} isLoading={isLoading}></FriendList>\r\n    )\r\n}\r\n\r\nexport default function FriendBox({ type }) {\r\n    let itemsHtml = null;\r\n    const logged = useSelector(isLogged);\r\n    const user = useSelector(authUser);\r\n    if (logged) {\r\n        switch (type) {\r\n            case 'friends_request':\r\n                itemsHtml = <RequestList username={user.username}></RequestList>\r\n                break;\r\n            case 'friends_sent_request':\r\n                itemsHtml = <SentRequestList username={user.username}></SentRequestList>\r\n                break;\r\n            case 'people_may_know':\r\n                itemsHtml = <PeopleMayKnowList username={user.username}></PeopleMayKnowList>\r\n                break;\r\n            default:\r\n                itemsHtml = <AllFriendList username={user.username}></AllFriendList>\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid style={{\r\n            paddingTop: '8px',\r\n            maxHeight: '500px',\r\n            overflowY: 'auto',\r\n        }} className=\"custom-scrollbar\" container spacing={2} >{itemsHtml}</Grid>\r\n    )\r\n}\r\n","import React, { useEffect} from 'react';\r\nimport './Friends.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport AppTitle from '../AppTitle/AppTitle';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport FriendBox from '../FriendBox/FriendBox';\r\nimport OnlineUsers from '../OnlineUser/OnlineUsers';\r\nimport mainStyles from '../../defines/styles/MainStyles';\r\nimport { Box } from '@material-ui/core';\r\n\r\n\r\nfunction a11yProps(index) {\r\n    return { id: `simple-tab-${index}`, 'aria-controls': `simple-tabpanel-${index}` };\r\n}\r\n\r\nconst friendTabs = ['friends_all', 'friends_request', 'friends_sent_request', 'people_may_know'];\r\n\r\nexport default function Friends() {\r\n    const classes = mainStyles();\r\n    const [value,\r\n        setValue] = React.useState(0);\r\n    const history = useHistory();\r\n    const params = useParams();\r\n\r\n    useEffect(() => {\r\n        let tab = params.friendsTab;\r\n        let index = friendTabs.indexOf(tab);\r\n        index = index < 0 ? 0 : index;\r\n        setValue(index);\r\n    }, [params.friendsTab])\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        let tab = friendTabs[newValue];\r\n        history.push(`/${tab}`);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Box p={2} >\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={9} >\r\n                        <AppTitle title=\"Friends\"></AppTitle>\r\n                        <Box mt={1}>\r\n                            <AppBar position=\"static\" color=\"default\">\r\n                                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" indicatorColor=\"primary\" className=\"my-tabs\" scrollButtons=\"auto\" variant=\"scrollable\">\r\n                                    <Tab label=\"All Friends\" {...a11yProps(0)} />\r\n                                    <Tab label=\"Friend Requests\" {...a11yProps(1)} />\r\n                                    <Tab label=\"Sent Requests\" {...a11yProps(2)} />\r\n                                    <Tab label=\"People you may know\" {...a11yProps(3)} />\r\n                                </Tabs>\r\n                            </AppBar>\r\n                            <FriendBox type={friendTabs[value]}></FriendBox>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={3} ><OnlineUsers /> </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n    Route,\r\n    useHistory,\r\n    useLocation,\r\n} from \"react-router-dom\";\r\nimport { isLogged } from \"../../features/auth/authSlice\";\r\n\r\nexport default function AuthRoute({ ...rest }) {\r\n    const logged = useSelector(isLogged);\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if (logged) {\r\n            let { from } = location.state || { from: { pathname: \"/\" } };\r\n            history.replace(from);\r\n        }\r\n    }, [logged, location.state, history])\r\n    return (\r\n        <Route {...rest}></Route>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Header from './components/Header/Header'\r\nimport Chat from './features/chat/Chat'\r\nimport { BrowserRouter as Router, Switch, Redirect, HashRouter } from 'react-router-dom'\r\nimport SignIn from './components/SignIn/SignIn'\r\nimport SignUp from './components/SignUp/SignUp'\r\nimport Notify from './features/notify/Notify'\r\nimport PrivateRoute from './components/PrivateRoute/PrivateRoute'\r\nimport { useCookies } from 'react-cookie'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { authUser, loginThunk, updateUser } from './features/auth/authSlice'\r\nimport { conversationId } from './features/chat/ChatSlice'\r\nimport { LOGGED_USER } from './defines/CookieName';\r\nimport { Paper } from '@material-ui/core';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Friends from './components/Friends/Friends';\r\nimport AuthRoute from './components/AuthRoute/AuthRoute';\r\nimport MySocket from './defines/Socket/MySocket';\r\nimport SocketEventName from './defines/Socket/SocketEventName';\r\nimport { setNotify } from './features/notify/NotifySlice';\r\nimport Helper from './defines/Helper';\r\nimport Message from './defines/Message';\r\nimport { fetchAndPrependConversationById, selectSidebarConversationIds, updateLastMessage } from './features/sidebarConversations/SidebarConversationsSlice';\r\n\r\nfunction useWindowSize() {\r\n    window.addEventListener('scroll', () => {\r\n        window.scrollTo(0, 0);\r\n    })\r\n}\r\n\r\n\r\nexport default function App() {\r\n    useWindowSize();\r\n    const [cookies] = useCookies([LOGGED_USER]);\r\n    const user = useSelector(authUser) || {};\r\n    const convoId = useSelector(conversationId);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        MySocket.onUpdateUser((data) => {\r\n            dispatch(updateUser(data))\r\n        })\r\n        MySocket.onFriendAccepted((data) => {\r\n            // notify\r\n            MySocket.emitUpdateUserById(user._id);\r\n            dispatch(setNotify({ message: Helper.format(Message.friendAccepted, data.user.username,), type: 'info', open: true }));\r\n        })\r\n        MySocket.onFriendRequested((data) => {\r\n            // notify\r\n            MySocket.emitUpdateUserById(user._id);\r\n            dispatch(setNotify({ message: Helper.format(Message.friendRequested, data.user.username,), type: 'info', open: true }));\r\n        })\r\n        MySocket.onFriendUnFriend((data) => {\r\n            MySocket.emitUpdateUserById(user._id);\r\n        })\r\n        MySocket.onFriendRequestCanceled((data) => {\r\n            MySocket.emitUpdateUserById(user._id);\r\n        })\r\n        MySocket.onFriendRejected((data) => {\r\n            MySocket.emitUpdateUserById(user._id);\r\n        })\r\n        MySocket.onNewMessageNotification((data) => {\r\n            const { message, conversationId } = data;\r\n            if (conversationId !== convoId && message.from._id !== user._id) {\r\n                dispatch(setNotify({ message: Helper.format(Message.newMessage, message.from.username, message.text), type: 'success', open: true, timeout: 2000 }));\r\n            }\r\n        })\r\n        return () => {\r\n            MySocket.off(SocketEventName.updateUser)\r\n            MySocket.off(SocketEventName.friendAccepted)\r\n            MySocket.off(SocketEventName.friendRequested)\r\n            MySocket.off(SocketEventName.friendUnfriend)\r\n            MySocket.off(SocketEventName.friendRequestCanceled)\r\n            MySocket.off(SocketEventName.friendRejected)\r\n            MySocket.off(SocketEventName.newMessageNotification)\r\n        }\r\n    }, [user._id, convoId])\r\n\r\n    // SIGN IN WITH COOKIE\r\n    useEffect(() => {\r\n        if (cookies[LOGGED_USER])\r\n            dispatch(loginThunk(cookies[LOGGED_USER]))\r\n    }, [])\r\n\r\n    const themeType = useSelector((state) => {\r\n        return state.theme.type\r\n    });\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: themeType\r\n        }\r\n    });\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <HashRouter ba>\r\n                <Paper style={{\r\n                    minHeight: '100vh'\r\n                }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            {/* HEADER */}\r\n                            <Header></Header>\r\n                            <Switch>\r\n                                {/* CONTENT */}\r\n                                <PrivateRoute path=\"/chat/:type(t|new)/:conversationId?\" exact> <Chat></Chat> </PrivateRoute>\r\n                                <PrivateRoute path={`/:friendsTab(friends|friends_all|friends_request|friends_sent_request|people_may_know)`} ><Friends></Friends> </PrivateRoute>\r\n                                <AuthRoute path=\"/login\" exact component={SignIn}></AuthRoute>\r\n                                <AuthRoute path=\"/sign-up\" exact component={SignUp}></AuthRoute>\r\n                                <Redirect to=\"/chat/new\"></Redirect>\r\n                            </Switch>\r\n                            <Notify></Notify>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </HashRouter>\r\n        </ThemeProvider >\r\n    )\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport authSlice from '../features/auth/authSlice'\r\nimport ChatSlice from '../features/chat/ChatSlice'\r\nimport NewChatSlice from '../features/NewChat/NewChatSlice'\r\nimport NotifySlice from '../features/notify/NotifySlice'\r\nimport SidebarConversationsSlice from '../features/sidebarConversations/SidebarConversationsSlice'\r\nimport themeSlice from '../GeneralSlices/themeSlice'\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        chat: ChatSlice,\r\n        notify: NotifySlice,\r\n        auth: authSlice,\r\n        sidebarConversations: SidebarConversationsSlice,\r\n        newChat: NewChatSlice,\r\n        theme: themeSlice,\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './components/store';\n\nReactDOM.render(\n    <Provider store={store}> <App></App> </Provider>\n    ,\n    document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}